# load new topo vars
load("Hmsc_CD/oregon_ada/data/topo_data.rdata")
# remove NA
sum(is.na(topo.df))
ind <- which(is.na(topo.df$twi))
topo.df <- topo.df[-ind,]
# same with otu
otu.pa.csv <- otu.pa.csv[-ind,]
# same with S.train
S.train <- S.train[-ind,]
## Make list of formulae to loop through,
colnames(topo.df)
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(topo.df))
str(dataN)
unique(unlist(sapply(fm, all.vars)))
all(unique(unlist(sapply(fm, all.vars))) %in% names(dataN))
nCores <- 2
cl <- makeCluster(nCores)
registerDoParallel(cl)
fm <- list(as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 +  cov4_16 + mTopo + ht.r1k + cov2_4.r1k + cov4_16.r1k)
,as.formula(otu.pa ~ be10 + slope + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo + cut.r1k.pt)
)
fm
modList <- foreach(i = seq_along(fm),
.combine = list,
.multicombine = TRUE, # ,.export = c("otu.pa", "env.vars", "S.train")
.noexport = c("otu.pa.csv","otu.qp.csv", "P")
) %dopar% {
# do glm model
mod <- mvabund::manyglm(fm[[i]], family = "negative.binomial", data = dataN)
# do ordination
mod.ord <- ecoCopula::cord(mod)
# Site scores: join ordination axes to data frame of predictors, coordinates
site_res <- data.frame(mod.ord$scores, topo.df, S.train[,c("UTM_E", "UTM_N")])
# Species scores
sp_res <- data.frame(mod.ord$loadings, species = colnames(dataN$otu.pa))
# don't do this locally
# do anova
# summ <- mvabund::summary.manyglm(mod, nBoot = nBoot, test = "LR")
# summ
# list(mod = mod, ord = mod.ord, site = site_res, sp=sp_res, summ = summ)
list(mod = mod, ord = mod.ord, site = site_res, sp=sp_res)
}
stopCluster(cl)
for(i in seq_along(modList)){
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
## correlation plot
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res, cont_pred2 = ht)
p4 <- plot_xy_factor2("pa", "", site_res, cont_pred2 = ht)
# put rows together
pA <- plot_grid(p2, p1, rel_widths = c(4,5), align = "h", axis = "t")
pB <- plot_grid(p3, p4) # p4
title <- ggdraw() +
draw_label(modName, fontface = 'bold', size = 15, x = 0.0, y = 0.5, hjust = 0)
m1 <- plot_grid(pA, pB, title, nrow = 3, rel_heights = c(4,5,1))
# m1 <- plot_grid(pA, pB, nrow = 2, rel_heights = c(4,5))
# m1
ggsave(paste0("Hmsc_CD/local/plots/mod_topo", i, ".png"), m1, width = 300, height = 250, units = "mm")
}
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
getwd()
library(dplyr)
# library(here) # not on ADA
library(glue)
samtoolsfilter <- "F2308" # F2308 filter only
samtoolsqual <- "q48"
minimaprundate <- 20200929
kelpierundate <- 20200927
primer <- "BF3BR2"
gitHub <- "https://raw.githubusercontent.com/dougwyu/HJA_analyses_Kelpie/master/Kelpie_maps"
outputidxstatstabulatefolder <- glue::glue("outputs_minimap2_{minimaprundate}_{samtoolsfilter}_{samtoolsqual}_kelpie{kelpierundate}_{primer}_vsearch97")
datFile <- glue("sample_by_species_table_{samtoolsfilter}_minimap2_{minimaprundate}_kelpie{kelpierundate}_uncorr.csv")
otuenv <- read.csv(file.path(gitHub, outputidxstatstabulatefolder, datFile))
trap <- "M1"
period <- "S1"
otuenv <- otuenv %>%
dplyr::filter(trap == trap[[1]] & period == period[[1]])
# bring in DEM stats
load("data/demStats.rdata") # temporary location for moment...
# load new topo vars
load("Hmsc_CD/oregon_ada/data/topo_data.rdata")
load("data/topo_data.rdata")
sum(is.na(topo.df))
ind <- which(is.na(topo.df$twi))
topo.df <- topo.df[-ind,]
otu.pa.csv <- otu.pa.csv[-ind,]
S.train <- S.train[-ind,]
X.train <- X.train[-ind,]
otuenv <- otuenv[-ind,]
dem_stats <- dem_stats[-ind,]
rm(datFile, gitHub, kelpierundate, minimaprundate, minocc, outputidxstatstabulatefolder, period, primer, samtoolsfilter, samtoolsqual, trap)
rm(ind)
minocc <- 5 # set to high number (e.g. 20) for testing
otu.ab.csv <- otuenv %>% dplyr::select(contains("__"))
otu.ab.csv <- otu.ab.csv[ , colSums(otu.ab.csv > 0) >= minocc]
otu.qp.csv <- otu.ab.csv %>%
mutate(across(contains("__"),
~ .x /(otuenv$COISpike_sum*otuenv$lysis_ratio))) %>%
mutate(across(contains("__"), ~ log(.x + 0.001))) %>%
mutate(across(contains("__"), ~ scales::rescale(.x))) # {scales}
max(otu.qp.csv) == 1 # should be TRUE
otu.pa.csv <- otu.ab.csv
otu.pa.csv[otu.pa.csv > 0] <- 1
min(colSums(otu.pa.csv)) == minocc # should be TRUE
Y.train.pa <- otu.pa.csv
Y.train.qp <- otu.qp.csv
topo.df
env.vars <- otuenv %>%
dplyr::select(!contains("__"), -UTM_E, -UTM_N, -starts_with("nor")) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_"),
elevation_m = elevation_m * 0.3048, ## convert to metres???
B1_median = apply(across(starts_with("B1_")), 1, median),
B2_median = apply(across(starts_with("B2_")), 1, median),
B3_median = apply(across(starts_with("B3_")), 1, median),
B4_median = apply(across(starts_with("B4_")), 1, median),
B5_median = apply(across(starts_with("B5_")), 1, median),
B6_median = apply(across(starts_with("B6_")), 1, median),
B7_median = apply(across(starts_with("B7_")), 1, median),
B10_median = apply(across(starts_with("B10_")), 1, median),
B11_median = apply(across(starts_with("B11_")), 1, median),
lg_DistStream = log(distToStream_m + 0.001),
lg_DistRoad = log(distToRoad_m + 0.001),
lg_YrsDisturb = log(YrsSinceDist + 0.001),
lg_cover2m_max = log(l_Cover_2m_max + 0.001),
lg_cover2m_4m = log(l_Cover_2m_4m + 0.001),
lg_cover4m_16m = log(l_Cover_4m_16m + 0.001)) %>%
dplyr::select(uniqueID, clearcut,insideHJA,oldGrowthIndex, elevation_m, canopyHeight_m, precipitation_mm, minT_annual, maxT_annual, mean.NDVI, mean.EVI, mean.green, mean.wet, mean.bright, l_p25, l_rumple, B1_median, B2_median,B3_median,B4_median,B5_median,B6_median,B7_median,B10_median,B11_median,lg_DistStream, lg_DistRoad, lg_YrsDisturb, lg_cover2m_max, lg_cover2m_4m, lg_cover4m_16m) %>%
dplyr::left_join(y = topo.df, by = "xy.utm.uniqueID") %>%
mutate(across(where(is.numeric), scale), # scale here
clearcut = factor(clearcut),
insideHJA = factor(insideHJA)) %>%
dplyr::select(-uniqueID)
source('J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code/S1_read_data.r', echo=TRUE)
head(topo.df)
colnames(topo.df)[1] <- "uniqueID"
head(topo.df)
save(topo.df, "data/topo_data.rdata")
save(topo.df, file = "data/topo_data.rdata")
#### Read data on Ada  #####
## Only local:
# setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
# dir()
getwd()
# wd set on pipeline on Ada
library(dplyr)
# library(here) # not on ADA
library(glue)
samtoolsfilter <- "F2308" # F2308 filter only
samtoolsqual <- "q48"
minimaprundate <- 20200929
kelpierundate <- 20200927
primer <- "BF3BR2"
gitHub <- "https://raw.githubusercontent.com/dougwyu/HJA_analyses_Kelpie/master/Kelpie_maps"
outputidxstatstabulatefolder <- glue::glue("outputs_minimap2_{minimaprundate}_{samtoolsfilter}_{samtoolsqual}_kelpie{kelpierundate}_{primer}_vsearch97")
datFile <- glue("sample_by_species_table_{samtoolsfilter}_minimap2_{minimaprundate}_kelpie{kelpierundate}_uncorr.csv")
otuenv <- read.csv(file.path(gitHub, outputidxstatstabulatefolder, datFile))
# M1S1
trap <- "M1"
period <- "S1"
otuenv <- otuenv %>%
dplyr::filter(trap == trap[[1]] & period == period[[1]])
# clean up
rm(datFile, gitHub, kelpierundate, minimaprundate, outputidxstatstabulatefolder, period, primer, samtoolsfilter, samtoolsqual, trap)
load("data/topo_data.rdata")
otuenv <- otuenv[-6,]
minocc <- 5 # set to high number (e.g. 20) for testing
otu.ab.csv <- otuenv %>% dplyr::select(contains("__"))
otu.ab.csv <- otu.ab.csv[ , colSums(otu.ab.csv > 0) >= minocc]
# log(FSL) correction and scale to quasiprobability
otu.qp.csv <- otu.ab.csv %>%
mutate(across(contains("__"),
~ .x /(otuenv$COISpike_sum*otuenv$lysis_ratio))) %>%
mutate(across(contains("__"), ~ log(.x + 0.001))) %>%
mutate(across(contains("__"), ~ scales::rescale(.x))) # {scales}
max(otu.qp.csv) == 1 # should be TRUE
# otu.qp.csv[1:10, 1:5]
# convert to presence/absence data
otu.pa.csv <- otu.ab.csv
otu.pa.csv[otu.pa.csv > 0] <- 1
min(colSums(otu.pa.csv)) == minocc # should be TRUE
Y.train.pa <- otu.pa.csv
Y.train.qp <- otu.qp.csv
rm(minocc)
env.vars <- otuenv %>%
dplyr::select(!contains("__"), -UTM_E, -UTM_N, -starts_with("nor")) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_"),
elevation_m = elevation_m * 0.3048, ## convert to metres???
B1_median = apply(across(starts_with("B1_")), 1, median),
B2_median = apply(across(starts_with("B2_")), 1, median),
B3_median = apply(across(starts_with("B3_")), 1, median),
B4_median = apply(across(starts_with("B4_")), 1, median),
B5_median = apply(across(starts_with("B5_")), 1, median),
B6_median = apply(across(starts_with("B6_")), 1, median),
B7_median = apply(across(starts_with("B7_")), 1, median),
B10_median = apply(across(starts_with("B10_")), 1, median),
B11_median = apply(across(starts_with("B11_")), 1, median),
lg_DistStream = log(distToStream_m + 0.001),
lg_DistRoad = log(distToRoad_m + 0.001),
lg_YrsDisturb = log(YrsSinceDist + 0.001),
lg_cover2m_max = log(l_Cover_2m_max + 0.001),
lg_cover2m_4m = log(l_Cover_2m_4m + 0.001),
lg_cover4m_16m = log(l_Cover_4m_16m + 0.001)) %>%
dplyr::select(uniqueID, clearcut,insideHJA,oldGrowthIndex, elevation_m, canopyHeight_m, precipitation_mm, minT_annual, maxT_annual, mean.NDVI, mean.EVI, mean.green, mean.wet, mean.bright, l_p25, l_rumple, B1_median, B2_median,B3_median,B4_median,B5_median,B6_median,B7_median,B10_median,B11_median,lg_DistStream, lg_DistRoad, lg_YrsDisturb, lg_cover2m_max, lg_cover2m_4m, lg_cover4m_16m) %>%
dplyr::left_join(y = topo.df, by = "uniqueID") %>%
mutate(across(where(is.numeric), scale), # scale here
clearcut = factor(clearcut),
insideHJA = factor(insideHJA)) %>%
dplyr::select(-uniqueID)
X.train <- env.vars
S.train <- otuenv %>%
dplyr::select(SiteName,trap,period, UTM_E, UTM_N) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_"))
head(S.train)
spp <- data.frame(species = colnames(Y.train.pa)) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_") %>%
select(-empty)
head(spp)
# convert to NAs
for(c in seq_along(spp)[-1]) spp[,c] <- sub("NA", NA, spp[,c])
# Add dummy family and genus
spp$family[is.na(spp$family)] <- sprintf("fam%03d", 1:sum((is.na(spp$family))))
spp$genus[is.na(spp$genus)] <- sprintf("gen%03d", 1:sum((is.na(spp$genus))))
head(spp)
# convert to factors for ape
spp <- spp[order(spp$class, spp$order, spp$family, spp$genus),]
tax.cols <- c("class", "order", "family", "genus", "epithet", "species")
for(i in tax.cols) spp[,i] <- factor(spp[,i])
head(spp)
P <- ape::as.phylo(~class/order/family/genus/species, data = spp, collapse = F)
P$edge.length = rep(1, length(P$edge)) # make all lengths eqaul between tax levels
ape::is.rooted(P)
all(P$tip.label %in% colnames(Y.train.pa))
all(P$tip.label %in% colnames(Y.train.qp))
rm(c, i, tax.cols)
rm(c, i, tax.cols, spp)
rm(otu.ab.csv, otuenv)
setwd("J:/UEA/Oregon/Oproject/oregon_ada")
setwd("J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada")
source(file.path("results", resFolder,"code/S1_read_data.r"))
source('J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code/S1_read_data.r', echo=TRUE)
range(colMeans(Y.train.pa > 0))
min(colSums(Y.train.pa > 0))
raretaxa <- which(colSums(Y.train.pa > 0) < 10)
length(raretaxa)
Y.train.pa <- Y.train.pa[, -raretaxa]
rm(raretaxa)
.sum(rowSums(Y.train.pa) == 0)
sum(rowSums(Y.train.pa) == 0)
names(X.train)
preds <- c("be10", "Nss", "Ess", "ht", "cov2_4", "cov4_16", "ht.r1k", "cov2_4.r1k", "cov4_16.r1k", "mTopo") # , "cut.r1k.pt"
length(preds)
all(preds %in% colnames(X.train))
XFormula <- as.formula(paste0("~ ", paste0(preds, collapse = " + ")))
XFormula
head(S.train)
length(unique(S.train$SiteName))
length(unique(S.train$uniqueID))
studyDesign <- data.frame(
site = as.factor(S.train$SiteName),
unique_sample = as.factor(S.train$uniqueID)
)
library(Hmsc)
studyDesign <- data.frame(
site = as.factor(S.train$SiteName),
unique_sample = as.factor(S.train$uniqueID)
)
xy <- data.frame(S.train[match(unique(S.train$SiteName), S.train$SiteName), c("UTM_E", "UTM_N")])
sum(duplicated(xy))
rownames(xy) <- unique(S.train$SiteName)
# head(xy); tail(xy)
rL.site <- HmscRandomLevel(sData = xy)
## Make models
models <- list(
m1 = Hmsc(Y = Y.train.pa,
XData = X.train, XFormula = XFormula,
phyloTree = P,
distr = "probit"),
)
models <- list(
m1 = Hmsc(Y = Y.train.pa,
XData = X.train, XFormula = XFormula,
phyloTree = P,
distr = "probit")
)
names(models) <- c("pa_nsp_nTopo")
modelnames <- c("pa_nsp_nTopo")
models
rm(S.train, X.train, P, XFormula, rL.site, studyDesign, preds)
samples_list = c(5,100)
thin_list = c(1,5)
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
# new Selection of topo - lidar predictors
preds <- c("be10", "Nss", "Ess", "ht", "cov2_4", "cov4_16", "ht.r1k", "cov2_4.r1k", "cov4_16.r1k", "mTopo") # , "cut.r1k.pt"
length(preds)
# check names
all(preds %in% colnames(X.train))
XFormula <- as.formula(paste0("~ ", paste0(preds, collapse = " + ")))
XFormula
preds2 <- c("be10","slope", "twi", "Ess", "ht", "cov2_4", "cov4_16", "ht.r500", "cov2_4.r500", "cov4_16.r500", "mTopo") # , "cut.r1k.pt"
length(preds2)
preds2 <- c("be10","Nss", "Ess", "ht", "cov2_4", "cov4_16", "ht.r500", "cov2_4.r500", "cov4_16.r500", "mTopo") # , "cut.r1k.pt"
length(preds2)
all(preds2 %in% colnames(X.train))
source('J:/UEA/gitHRepos/HJA_analyses_Kelpie/Hmsc_CD/oregon_ada/code/S1_read_data.r', echo=TRUE)
all(preds2 %in% colnames(X.train))
raretaxa <- which(colSums(Y.train.pa > 0) < 10)
length(raretaxa)
Y.train.pa2 <- Y.train.pa[, -raretaxa]
rm(raretaxa)
sum(rowSums(Y.train.pa) == 0)
sum(rowSums(Y.train.pa2) == 0)
names(X.train)
preds <- c("be10", "Nss", "Ess", "ht", "cov2_4", "cov4_16", "ht.r1k", "cov2_4.r1k", "cov4_16.r1k", "mTopo") # , "cut.r1k.pt"
length(preds)
# check names
all(preds %in% colnames(X.train))
XFormula <- as.formula(paste0("~ ", paste0(preds, collapse = " + ")))
XFormula
preds2 <- c("be10","Nss", "Ess", "ht", "cov2_4", "cov4_16", "ht.r500", "cov2_4.r500", "cov4_16.r500", "mTopo") # , "cut.r1k.pt"
length(preds2)
# check names
all(preds2 %in% colnames(X.train))
XFormula2 <- as.formula(paste0("~ ", paste0(preds2, collapse = " + ")))
XFormula2
head(S.train)
length(unique(S.train$SiteName))
length(unique(S.train$uniqueID))
studyDesign <- data.frame(
site = as.factor(S.train$SiteName),
unique_sample = as.factor(S.train$uniqueID)
)
xy <- data.frame(S.train[match(unique(S.train$SiteName), S.train$SiteName), c("UTM_E", "UTM_N")])
# check for duplicated coordiantes>
sum(duplicated(xy))
rownames(xy) <- unique(S.train$SiteName)
rL.site <- HmscRandomLevel(sData = xy)
ncol(Y.train.pa)
library(Hmsc)
models <- list(
m1 = Hmsc(Y = Y.train.pa2,
XData = X.train, XFormula = XFormula,
phyloTree = P,
distr = "probit",
studyDesign = studyDesign,
ranLevels = {
list("site" = rL.site)
}),
m2 = Hmsc(Y = Y.train.pa2,
XData = X.train, XFormula = XFormula2,
phyloTree = P,
distr = "probit"),
m3 = Hmsc(Y = Y.train.pa2,
XData = X.train, XFormula = XFormula2,
phyloTree = P, distr = "probit",
studyDesign = studyDesign,
ranLevels = {
list("site" = rL.site)
}),
m5 = Hmsc(Y = Y.train.pa,
XData = X.train, XFormula = XFormula,
phyloTree = P,
distr = "probit"),
m6 = Hmsc(Y = Y.train.pa,
XData = X.train, XFormula = XFormula2,
phyloTree = P,
distr = "probit")
)
names(models) <- c("pa_sp_nTopo", "pa_nsp_nTopo_500", "pa_sp_nTopo_500", "pa_full_nsp_nTopo", "pa_full_nsp_nTopo_500")
modelnames <- c("pa_sp_nTopo", "pa_nsp_nTopo_500", "pa_sp_nTopo_500", "pa_full_nsp_nTopo", "pa_full_nsp_nTopo_500")
models
models <- list(
m1 = Hmsc(Y = Y.train.pa2,
XData = X.train, XFormula = XFormula,
phyloTree = P,
distr = "probit",
studyDesign = studyDesign,
ranLevels = {
list("site" = rL.site)
}),
m2 = Hmsc(Y = Y.train.pa2,
XData = X.train, XFormula = XFormula2,
phyloTree = P,
distr = "probit"),
m3 = Hmsc(Y = Y.train.pa2,
XData = X.train, XFormula = XFormula2,
phyloTree = P, distr = "probit",
studyDesign = studyDesign,
ranLevels = {
list("site" = rL.site)
})
)
names(models) <- c("pa_sp_nTopo", "pa_nsp_nTopo_500", "pa_sp_nTopo_500")
modelnames <- c("pa_sp_nTopo", "pa_nsp_nTopo_500", "pa_sp_nTopo_500")
rm(S.train, X.train, P, XFormula, rL.site, studyDesign, preds)
rm(S.train, X.train, P, XFormula, rL.site, studyDesign, preds, preds2, XFormula2)
wd <- here::here()
setwd(file.path(wd, "Hmsc_CD/oregon_ada"))
source("code/S1_read_data.r")
rm(Y.train.qp, Y.train.pa, X.train)
load("Hmsc_CD/oregon_ada/data/topo_data.rdata")
load("data/topo_data.rdata")
source("code/S1_read_data.r")
colnames(env.vars)
fm
fm <- list(as.formula(otu.pa ~ dem500 + tri.pt + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ dem500 * oldGrowthIndex + tri.pt + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ dem500 * insideHJA + tri.pt + oldGrowthIndex + lg_YrsDisturb),
as.formula(otu.pa ~ dem500 + tri.pt + insideHJA + oldGrowthIndex + lg_YrsDisturb + mean.NDVI + lg_DistRoad + canopyHeight_m),
as.formula(otu.pa ~ dem500 * insideHJA + dem500 * oldGrowthIndex + tri.pt + lg_YrsDisturb + mean.NDVI + lg_DistRoad),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo)
)
fm
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(env.vars))
library(mvabund)
library(ecoCopula)
library(doParallel)
library(foreach)
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(env.vars))
str(dataN)
nCores <- 16
dir.exists("results/ecocopula")
fm <- list(as.formula(otu.pa ~ dem500 + tri.pt + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ dem500 * oldGrowthIndex + tri.pt + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ dem500 * insideHJA + tri.pt + oldGrowthIndex + lg_YrsDisturb),
as.formula(otu.pa ~ dem500 + tri.pt + insideHJA + oldGrowthIndex + lg_YrsDisturb + mean.NDVI + lg_DistRoad + canopyHeight_m),
as.formula(otu.pa ~ dem500 * insideHJA + dem500 * oldGrowthIndex + tri.pt + lg_YrsDisturb + mean.NDVI + lg_DistRoad),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r250 + cov2_4.r250 + cov4_16.r250 + mTopo),
as.formula(otu.pa ~ be10 + slope + twi + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo)
)
fm
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(env.vars))
unique(unlist(sapply(fm, all.vars)))
all(unique(unlist(sapply(fm, all.vars))) %in% names(dataN))
source("code/S1_read_data.r")
rm(Y.train.qp, Y.train.pa, X.train)
colnames(env.vars)
fm <- list(as.formula(otu.pa ~  be500 + tri + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * oldGrowthIndex + tri.pt + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * insideHJA + tri.pt + oldGrowthIndex + lg_YrsDisturb),
as.formula(otu.pa ~ be500 + tri.pt + insideHJA + oldGrowthIndex + lg_YrsDisturb + mean.NDVI + lg_DistRoad + canopyHeight_m),
as.formula(otu.pa ~ be500 * insideHJA + dem500 * oldGrowthIndex + tri.pt + lg_YrsDisturb + mean.NDVI + lg_DistRoad),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r250 + cov2_4.r250 + cov4_16.r250 + mTopo),
as.formula(otu.pa ~ be500 + slope + twi + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo)
)
fm
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(env.vars))
unique(unlist(sapply(fm, all.vars)))
all(unique(unlist(sapply(fm, all.vars))) %in% names(dataN))
fm <- list(as.formula(otu.pa ~  be500 + tri + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * oldGrowthIndex + tri.pt + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * insideHJA + tri.pt + oldGrowthIndex + lg_YrsDisturb),
as.formula(otu.pa ~ be500 + tri.pt + insideHJA + oldGrowthIndex + lg_YrsDisturb + mean.NDVI + lg_DistRoad + canopyHeight_m),
as.formula(otu.pa ~ be500 * insideHJA + be500 * oldGrowthIndex + tri.pt + lg_YrsDisturb + mean.NDVI + lg_DistRoad),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r250 + cov2_4.r250 + cov4_16.r250 + mTopo),
as.formula(otu.pa ~ be500 + slope + twi + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo)
)
fm
unique(unlist(sapply(fm, all.vars)))
all(unique(unlist(sapply(fm, all.vars))) %in% names(dataN))
unique(unlist(sapply(fm, all.vars))) %in% names(dataN)
fm <- list(as.formula(otu.pa ~  be500 + tri + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * oldGrowthIndex + tri + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * insideHJA + tri.pt + oldGrowthIndex + lg_YrsDisturb),
as.formula(otu.pa ~ be500 + tri + insideHJA + oldGrowthIndex + lg_YrsDisturb + mean.NDVI + lg_DistRoad + canopyHeight_m),
as.formula(otu.pa ~ be500 * insideHJA + be500 * oldGrowthIndex + tri + lg_YrsDisturb + mean.NDVI + lg_DistRoad),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r250 + cov2_4.r250 + cov4_16.r250 + mTopo),
as.formula(otu.pa ~ be500 + slope + twi + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo)
)
fm
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(env.vars))
unique(unlist(sapply(fm, all.vars)))
all(unique(unlist(sapply(fm, all.vars))) %in% names(dataN))
unique(unlist(sapply(fm, all.vars))) %in% names(dataN)
fm <- list(as.formula(otu.pa ~  be500 + tri + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * oldGrowthIndex + tri + insideHJA + lg_YrsDisturb),
as.formula(otu.pa ~ be500 * insideHJA + tri + oldGrowthIndex + lg_YrsDisturb),
as.formula(otu.pa ~ be500 + tri + insideHJA + oldGrowthIndex + lg_YrsDisturb + mean.NDVI + lg_DistRoad + canopyHeight_m),
as.formula(otu.pa ~ be500 * insideHJA + be500 * oldGrowthIndex + tri + lg_YrsDisturb + mean.NDVI + lg_DistRoad),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo),
as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 + cov4_16 + ht.r250 + cov2_4.r250 + cov4_16.r250 + mTopo),
as.formula(otu.pa ~ be500 + slope + twi + ht + cov2_4 + cov4_16 + ht.r500 + cov2_4.r500 + cov4_16.r500 + mTopo)
)
fm
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(env.vars))
# str(dataN)
# check all terms are in data object
unique(unlist(sapply(fm, all.vars)))
all(unique(unlist(sapply(fm, all.vars))) %in% names(dataN))
