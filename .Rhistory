library(ggplot2)
library(cowplot)
str(modList, max.level =2)
source("Hmsc_CD/local/fn_ecoCopula_plot.r")## modified plot functions...
mod <- modList[[1]]$mod
sp_res <- modList[[1]]$sp
site_res <- modList[[1]]$site
alpha <- 4*0.95
# chk residuals
plot(mod)
#plot factors
plot_factors(alpha, "pa", "mod1", sp_res, site_res)
# Plot over coords with factors as colour fill
plot_xy_factor1("pa", "mod1", site_res)
plot_xy_factor2("pa", "mod1", site_res)
## correlation plot
cor.preds <- colnames(env.vars)[sapply(env.vars, is.numeric)]
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
t_corrplot(mod.cor, "mod1")
source("Hmsc_CD/local/fn_ecoCopula_plot.r")## modified plot functions...
plot_factors(alpha, "pa", "mod1", sp_res, site_res)
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = ht, cont_pred2 = be10, cat_pred = NULL)
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "ht", cont_pred2 = "be10", cat_pred = NULL)
plot_xy_factor2 <- function(abund, model, siteData,
cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
ggplot() +
geom_point(aes(x = UTM_E, y = UTM_N,
color = Factor2,
size = exp(cont_pred2) # YrsSinceDist, l_rumple
#, shape = as.factor(cat_pred)
),
data = site_res) +
# geom_text_repel(aes(x = UTM_E, y = UTM_N,
#                     label = env.csv$SiteName),
#                 data = siteData,
#                 size = 2) +
# geom_label_repel(aes(x = Factor1 * alpha, y = Factor2 * alpha, label = species), data = sp_res, size = 2.5) +
scale_color_gradientn(colours = brewer.pal(n = 10, name = "PuOr")) +
theme_classic() + # or "PuOr" or "RdYlBu"
labs(title = glue("HJA, XY plot, Factor2, {abund}"),
subtitle = model) +
xlab("UTM_E") +
ylab("UTM_N")
}
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "ht", cont_pred2 = "be10")
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = ht, cont_pred2 = be10)
var(ht)
plot_factors <- function(alphanum, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
alpha <- alphanum
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = spData,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = vars(cont_pred1),
size = exp(vars(cont_pred2)),
shape = as.factor(vars(cat_pred))), data = siteData) +
# geom_text_repel(aes(x = Factor1, y = Factor2,
#                     label = env.csv$SiteName),
#                 data = siteData,
#                 size = 2) +
# geom_label_repel(aes(x = Factor1 * alpha, y = Factor2 * alpha, label = species), data = sp_res, size = 2.5) +
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu")) +
theme_classic() + # or "PuOr" or "RdYlBu"
labs(title = glue("HJA, ecoCopula ordination, {abund}"),
subtitle = model) +
xlab("Factor 1") +
ylab("Factor 2")
}
plot_factors <- function(alphanum, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
alpha <- alphanum
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = spData,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = vars(cont_pred1),
size = exp(vars(cont_pred2)),
#,shape = as.factor(vars(cat_pred))
data = siteData)) +
# geom_text_repel(aes(x = Factor1, y = Factor2,
#                     label = env.csv$SiteName),
#                 data = siteData,
#                 size = 2) +
# geom_label_repel(aes(x = Factor1 * alpha, y = Factor2 * alpha, label = species), data = sp_res, size = 2.5) +
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu")) +
theme_classic() + # or "PuOr" or "RdYlBu"
labs(title = glue("HJA, ecoCopula ordination, {abund}"),
subtitle = model) +
xlab("Factor 1") +
ylab("Factor 2")
}
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "ht", cont_pred2 = "be10")
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = ht, cont_pred2 = be10)
plot_factors <- function(alphanum, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
alpha <- alphanum
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = spData,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
#color = vars(cont_pred1),
#size = exp(vars(cont_pred2)),
#,shape = as.factor(vars(cat_pred))
data = siteData)) +
# geom_text_repel(aes(x = Factor1, y = Factor2,
#                     label = env.csv$SiteName),
#                 data = siteData,
#                 size = 2) +
# geom_label_repel(aes(x = Factor1 * alpha, y = Factor2 * alpha, label = species), data = sp_res, size = 2.5) +
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu")) +
theme_classic() + # or "PuOr" or "RdYlBu"
labs(title = glue("HJA, ecoCopula ordination, {abund}"),
subtitle = model) +
xlab("Factor 1") +
ylab("Factor 2")
}
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = ht, cont_pred2 = be10)
alpha <- 4*0.95
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
data = site_res)) +
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
data = site_res))
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1)
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2),
data = site_res)
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = be10),
data = site_res)
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = be10),
data = site_res)+
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu"))
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = be10,
size = ht),
data = site_res)+
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu"))
plot_factors <- function(alphanum, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
alpha <- alphanum
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = spData,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = vars(cont_pred1)),
#size = exp(vars(cont_pred2)),
#,shape = as.factor(vars(cat_pred))
data = siteData) +
# geom_text_repel(aes(x = Factor1, y = Factor2,
#                     label = env.csv$SiteName),
#                 data = siteData,
#                 size = 2) +
# geom_label_repel(aes(x = Factor1 * alpha, y = Factor2 * alpha, label = species), data = sp_res, size = 2.5) +
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu")) +
theme_classic() + # or "PuOr" or "RdYlBu"
labs(title = glue("HJA, ecoCopula ordination, {abund}"),
subtitle = model) +
xlab("Factor 1") +
ylab("Factor 2")
}
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = be10, cont_pred2 = ht)
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
plot_factors1 <- function(alpha, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = be10,
size = ht),
data = site_res)+
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu"))
}
plot_factors1(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
plot_factors1 <- function(alpha, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = cont_pred1,
size = ht),
data = site_res)+
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu"))
}
plot_factors1(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = be10, cont_pred2 = "ht")
plot_factors1(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
plot_factors1 <- function(alpha, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = vars(cont_pred1),
size = ht),
data = site_res)+
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu"))
}
plot_factors1(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
plot_factors1 <- function(alpha, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
cont_pred1 <- ensym(cont_pred1)
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = !!cont_pred1,
size = ht),
data = site_res)+
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu"))
}
plot_factors1(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
plot_factors1(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = be10, cont_pred2 = "ht")
plot_factors <- function(alphanum, abund, model, spData, siteData,
cont_pred1 = elevation_m, cont_pred2 = lg_YrsDisturb, cat_pred = insideHJA) {
alpha <- alphanum
cont_pred1 <- ensym(cont_pred1)
cont_pred2 <- ensym(cont_pred2)
cat_pred1 <- ensym(cat_pred1)
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = spData,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = !!cont_pred1,
size = !!cont_pred2),
#,shape = as.factor(vars(cat_pred))
data = siteData) +
# geom_text_repel(aes(x = Factor1, y = Factor2,
#                     label = env.csv$SiteName),
#                 data = siteData,
#                 size = 2) +
# geom_label_repel(aes(x = Factor1 * alpha, y = Factor2 * alpha, label = species), data = sp_res, size = 2.5) +
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu")) +
theme_classic() + # or "PuOr" or "RdYlBu"
labs(title = glue("HJA, ecoCopula ordination, {abund}"),
subtitle = model) +
xlab("Factor 1") +
ylab("Factor 2")
}
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
source("Hmsc_CD/local/fn_ecoCopula_plot.r")## modified plot functions...
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
source("Hmsc_CD/local/fn_ecoCopula_plot.r")## modified plot functions...
plot_xy_factor1("pa", "mod1", site_res)
plot_xy_factor1("pa", "mod1", site_res, cont_pred2 = ht)
plot_xy_factor2("pa", "mod1", site_res, cont_pred2 = ht)
plot_xy_factor1("pa", "mod1", site_res, cont_pred2 = ht)
mod <- modList[[2]]$mod
site_res <- modList[[2]]$site
mod <- modList[[2]]$mod
sp_res <- modList[[2]]$sp
site_res <- modList[[2]]$site
alpha <- 4*0.95
ggplot() +
geom_segment(aes(x = 0, y = 0,
xend = Factor1 * alpha * 0.95,
yend = Factor2 * alpha * 0.95),
data = sp_res,
size = .1) +
geom_point(aes(x = Factor1, y = Factor2,
color = be10,
size = ht),
data = site_res)+
scale_color_gradientn(colours = brewer.pal(n = 10, name = "RdYlBu"))
plot_factors(alpha, "pa", "mod1", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
plot_xy_factor1("pa", "mod1", site_res, cont_pred2 = ht)
plot_xy_factor2("pa", "mod1", site_res, cont_pred2 = ht)
plot_xy_factor1("pa", "mod1", site_res, cont_pred2 = ht)
cor.preds <- colnames(env.vars)[sapply(env.vars, is.numeric)]
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
mod.ord <- modList[[2]]$ord
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
t_corrplot(mod.cor, "mod1")
alpha <- 4*0.95
for(i in seq_along(modList)){
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res)
## correlation plot
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res)
p4 <- plot_xy_factor2("pa", "", site_res)
# put rows together
pA <- plot_grid(p2, p1, rel_widths = c(4,5), align = "h", axis = "t")
pB <- plot_grid(p3, p4) # p4
title <- ggdraw() +
draw_label(modName, fontface = 'bold', size = 15, x = 0.0, y = 0.5, hjust = 0)
m1 <- plot_grid(pA, pB, title, nrow = 3, rel_heights = c(4,5,1))
# m1 <- plot_grid(pA, pB, nrow = 2, rel_heights = c(4,5))
# m1
ggsave(paste0("Hmsc_CD/local/plots/mod_topo", i, ".png"), m1, width = 300, height = 250, units = "mm")
}
for(i in seq_along(modList)){
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
## correlation plot
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res, cont_pred2 = ht)
p4 <- plot_xy_factor2("pa", "", site_res, cont_pred2 = ht)
# put rows together
pA <- plot_grid(p2, p1, rel_widths = c(4,5), align = "h", axis = "t")
pB <- plot_grid(p3, p4) # p4
title <- ggdraw() +
draw_label(modName, fontface = 'bold', size = 15, x = 0.0, y = 0.5, hjust = 0)
m1 <- plot_grid(pA, pB, title, nrow = 3, rel_heights = c(4,5,1))
# m1 <- plot_grid(pA, pB, nrow = 2, rel_heights = c(4,5))
# m1
ggsave(paste0("Hmsc_CD/local/plots/mod_topo", i, ".png"), m1, width = 300, height = 250, units = "mm")
}
fm <- list(as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 +  cov4_16 + mTopo + ht.r1k + cov2_4.r1k + cov4_16.r1k)
#,as.formula(otu.pa ~ be10 + slope + Nss + Ess + twi + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo)
)
fm
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(topo.df))
str(dataN)
source("Hmsc_CD/local/L1_read_data.r")
# otu.pa.csv is Y.train.pa; otu.qp.csv is Y.train.qp
rm(Y.train.qp, Y.train.pa, X.train)
# load new topo vars
load("Hmsc_CD/oregon_ada/data/topo_data.rdata")
# remove NA
sum(is.na(topo.df))
ind <- which(is.na(topo.df$twi))
topo.df <- topo.df[-ind,]
# same with otu
otu.pa.csv <- otu.pa.csv[-ind,]
# same with S.train
S.train <- S.train[-ind,]
## Make list of formulae to loop through,
colnames(topo.df)
dataN <- c(list(otu.pa = mvabund(otu.pa.csv)), as.list(topo.df))
str(dataN)
unique(unlist(sapply(fm, all.vars)))
all(unique(unlist(sapply(fm, all.vars))) %in% names(dataN))
nCores <- 2
cl <- makeCluster(nCores)
registerDoParallel(cl)
fm <- list(as.formula(otu.pa ~ be10 + Nss + Ess + ht + cov2_4 +  cov4_16 + mTopo + ht.r1k + cov2_4.r1k + cov4_16.r1k)
,as.formula(otu.pa ~ be10 + slope + ht.r1k + cov2_4.r1k + cov4_16.r1k + mTopo + cut.r1k.pt)
)
fm
modList <- foreach(i = seq_along(fm),
.combine = list,
.multicombine = TRUE, # ,.export = c("otu.pa", "env.vars", "S.train")
.noexport = c("otu.pa.csv","otu.qp.csv", "P")
) %dopar% {
# do glm model
mod <- mvabund::manyglm(fm[[i]], family = "negative.binomial", data = dataN)
# do ordination
mod.ord <- ecoCopula::cord(mod)
# Site scores: join ordination axes to data frame of predictors, coordinates
site_res <- data.frame(mod.ord$scores, topo.df, S.train[,c("UTM_E", "UTM_N")])
# Species scores
sp_res <- data.frame(mod.ord$loadings, species = colnames(dataN$otu.pa))
# don't do this locally
# do anova
# summ <- mvabund::summary.manyglm(mod, nBoot = nBoot, test = "LR")
# summ
# list(mod = mod, ord = mod.ord, site = site_res, sp=sp_res, summ = summ)
list(mod = mod, ord = mod.ord, site = site_res, sp=sp_res)
}
stopCluster(cl)
for(i in seq_along(modList)){
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res, cont_pred1 = "be10", cont_pred2 = "ht")
## correlation plot
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res, cont_pred2 = ht)
p4 <- plot_xy_factor2("pa", "", site_res, cont_pred2 = ht)
# put rows together
pA <- plot_grid(p2, p1, rel_widths = c(4,5), align = "h", axis = "t")
pB <- plot_grid(p3, p4) # p4
title <- ggdraw() +
draw_label(modName, fontface = 'bold', size = 15, x = 0.0, y = 0.5, hjust = 0)
m1 <- plot_grid(pA, pB, title, nrow = 3, rel_heights = c(4,5,1))
# m1 <- plot_grid(pA, pB, nrow = 2, rel_heights = c(4,5))
# m1
ggsave(paste0("Hmsc_CD/local/plots/mod_topo", i, ".png"), m1, width = 300, height = 250, units = "mm")
}
getwd()
wd <- here::here()
setwd(wd)
dir()
rm(wd)
library(sf)
library(raster)
source("Hmsc_CD/local/L1_read_data.r")
rm(Y.train.pa, Y.train.qp, P, otu.pa.csv, otu.qp.csv, X.train)
head(S.train)
xy.sf <- st_as_sf(S.train, coords = c("UTM_E", "UTM_N"), crs = nadutm10)
nadutm10 <- 26910
utm10N <- 32610
xy.sf <- st_as_sf(S.train, coords = c("UTM_E", "UTM_N"), crs = nadutm10)
rm(S.train)
# transform to wgs utm to match rasters
xy.utm <- st_transform(xy.sf, crs = utm10N)
rm(xy.sf)
# write
gis <- "J:/UEA/Oregon/gis"
load(file.path(gis, "r_utm/cut_stack.rdata"))
load(file.path(gis, "r_utm/elev_cov.rdata"))
cut.r1k.pt <- extract(cutStack$cut_r1k, xy.utm)
dem500 <- raster::extract(terr$be10, xy.utm, buffer = 500, fun=mean, na.rm = T)
dem.pt <- raster::extract(terr$be10, xy.utm)
mTopo <- dem.pt - dem500
terr.pt <- raster::extract(terr, xy.utm)
cov.pt <- raster::extract(covStack, xy.utm)
topo.df <- data.frame(uniqueID = xy.utm$uniqueID, terr.pt, cov.pt, mTopo, cut.r1k.pt)
head(topo.df)
str(topo.df)
summary(topo.df)
save(topo.df, file = "Hmsc_CD/oregon_ada/data/topo_data.rdata")
topo.df <- data.frame(uniqueID = xy.utm$uniqueID, terr.pt, cov.pt, be500 = dem500, mTopo, cut.r1k.pt)
head(topo.df)
str(topo.df)
summary(topo.df)
save(topo.df, file = "Hmsc_CD/oregon_ada/data/topo_data.rdata")
