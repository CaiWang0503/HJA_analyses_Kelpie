mutate(across(contains("__"),
~ .x /(otuenv$COISpike_sum*otuenv$lysis_ratio))) %>%
mutate(across(contains("__"), ~ log(.x + 0.001))) %>%
mutate(across(contains("__"), ~ scales::rescale(.x))) # {scales}
max(otu.qp.csv) == 1 # should be TRUE
# otu.qp.csv[1:10, 1:5]
# convert to presence/absence data
otu.pa.csv <- otu.ab.csv
otu.pa.csv[otu.pa.csv > 0] <- 1
min(colSums(otu.pa.csv)) == minocc # should be TRUE
Y.train.pa <- otu.pa.csv
Y.train.qp <- otu.qp.csv
# env covariates
# otuenv %>%
#   dplyr::select(!contains("__"), -UTM_E, -UTM_N, -starts_with("nor")) %>%
#   names(.)
#  [1] "SiteName"           "trap"               "period"
env.vars <- otuenv %>%
dplyr::select(!contains("__"), -UTM_E, -UTM_N, -starts_with("nor")) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_"),
elevation_m = elevation_m * 0.3048, ## convert to metres???
B1_median = apply(across(starts_with("B1_")), 1, median),
B2_median = apply(across(starts_with("B2_")), 1, median),
B3_median = apply(across(starts_with("B3_")), 1, median),
B4_median = apply(across(starts_with("B4_")), 1, median),
B5_median = apply(across(starts_with("B5_")), 1, median),
B6_median = apply(across(starts_with("B6_")), 1, median),
B7_median = apply(across(starts_with("B7_")), 1, median),
B10_median = apply(across(starts_with("B10_")), 1, median),
B11_median = apply(across(starts_with("B11_")), 1, median),
lg_DistStream = log(distToStream_m + 0.001),
lg_DistRoad = log(distToRoad_m + 0.001),
lg_YrsDisturb = log(YrsSinceDist + 0.001),
lg_cover2m_max = log(l_Cover_2m_max + 0.001),
lg_cover2m_4m = log(l_Cover_2m_4m + 0.001),
lg_cover4m_16m = log(l_Cover_4m_16m + 0.001)) %>%
dplyr::select(uniqueID, clearcut,insideHJA,oldGrowthIndex, elevation_m, canopyHeight_m, precipitation_mm, minT_annual, maxT_annual, mean.NDVI, mean.EVI, mean.green, mean.wet, mean.bright, l_p25, l_rumple, B1_median, B2_median,B3_median,B4_median,B5_median,B6_median,B7_median,B10_median,B11_median,lg_DistStream, lg_DistRoad, lg_YrsDisturb, lg_cover2m_max, lg_cover2m_4m, lg_cover4m_16m) %>%
dplyr::left_join(y = dem_stats[,c("uniqueID", "dem500", "tri.pt")], by = "uniqueID") %>%
mutate(across(where(is.numeric), scale), # scale here
clearcut = factor(clearcut),
insideHJA = factor(insideHJA)) %>%
dplyr::select(-uniqueID)
str(env.vars)
X.train <- env.vars
## Study design data
S.train <- otuenv %>%
dplyr::select(SiteName,trap,period, UTM_E, UTM_N) %>%
mutate(uniqueID = paste(SiteName, trap, period, sep = "_"))
head(S.train)
spp <- data.frame(species = colnames(Y.train.pa)) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_") %>%
select(-empty)
data.frame(species = colnames(Y.train.pa))
spp <- data.frame(species = colnames(Y.train.pa)) %>%
tidyr::separate(col = species, into = c("OTU", "empty", "class", "order", "family",
"genus", "epithet", "BOLD", "BOLDID",
"size"),
remove = FALSE, sep = "_") %>%
dplyr::select(-empty)
head(spp)
for(c in seq_along(spp)[-1]) spp[,c] <- sub("NA", NA, spp[,c])
# Add dummy family and genus
spp$family[is.na(spp$family)] <- sprintf("fam%03d", 1:sum((is.na(spp$family))))
spp$genus[is.na(spp$genus)] <- sprintf("gen%03d", 1:sum((is.na(spp$genus))))
head(spp)
# convert to factors for ape
spp <- spp[order(spp$class, spp$order, spp$family, spp$genus),]
tax.cols <- c("class", "order", "family", "genus", "epithet", "species")
for(i in tax.cols) spp[,i] <- factor(spp[,i])
head(spp)
P <- ape::as.phylo(~class/order/family/genus/species, data = spp, collapse = F)
P$edge.length = rep(1, length(P$edge)) # make all lengths eqaul between tax levels
ape::is.rooted(P)
all(P$tip.label %in% colnames(Y.train.pa))
all(P$tip.label %in% colnames(Y.train.qp))
rm(c, datFile, gitHub, i, kelpierundate, minimaprundate, minocc, outputidxstatstabulatefolder, period, primer, samtoolsfilter, samtoolsqual, tax.cols, trap)
rm(dem_stats, spp)
rm(otu.ab.csv, otuenv)
source("Hmsc_CD/local/L1_read_data.r")
rm(Y.train.pa, Y.train.qp, P)
head(S.train)
xy.sf <- st_as_sf(S.train, coords = c("UTM_E", "UTM_N"), crs = 32610)
terr <- brick("J:/UEA/Oregon/gis/r_nad/terrain.tif")
terr
nad83 <- 4269
utm10N <- 32610
xy.sf <- st_as_sf(S.train, coords = c("UTM_E", "UTM_N"), crs = utm10N)
xy.nad <- st_transform(xy.sf, crs = nad83)
plot(terr)
dem.pts <- raster::extract(terr, xy.nad)
head(dem.pts)
names(terr) <- c("dem", "tri")
plot(terr)
dem.pts <- raster::extract(terr, xy.nad)
head(dem.pts)
dem.500m <- raster::extract(terr, xy.nad, buffer = 500, fun = mean) # units in m for unprojected data
head(dem.500m)
xy.nad$dem.pt <- dem.pts[,"dem"]
xy.nad.dem500 <- dem.500m[,"dem"]
xy.nad$dem500 <- dem.500m[,"dem"]
xy.nad$diffDem <- xy.nad$dem500 - xy.nad$dem.pt
hist(xy.nad$dem.pt)
hist(xy.nad$diffDem)
mapview::mapview(xy.nad, zcol = "diffDem",
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT", "Thunderforest.Outdoors"),
legend = T)
xy.nad$diffDem <- abs(xy.nad$dem500 - xy.nad$dem.pt)
rm(xy.nad.dem500)
mapview::mapview(xy.nad, zcol = "diffDem", layer.name = "Abs diff pt vs 500m DEM",
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
head(dem.pts)
colnames(dem.pts) <- c("dem.pt", "tri.pt")
head(dem.pts)
xy.sf <- st_as_sf(S.train, coords = c("UTM_E", "UTM_N"), crs = utm10N)
xy.nad <- st_transform(xy.sf, crs = nad83)
xy.nad <- cbind(xy.nad, dem.pts)
xy.nad
head(dem.500m)
xy.nad$dem500 <- dem.500m[,"dem"]
xy.nad$diffDem <- abs(xy.nad$dem500 - xy.nad$dem.pt)
plot(xy.nad$tri.pt, xy.nad$diffDem)
hist(xy.nad$dem.pt)
hist(xy.nad$diffDem)
mapview::mapview(xy.nad, zcol = c("diffDem", "tri.pt"),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv <- mapview::mapview(xy.nad, zcol = c("diffDem", "tri.pt"),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mapview::mapshot(mv, file = "Hmsc_CD/local/plots/dem_map.html")
mv2 <- mapview::mapview(xy.nad, zcol = c("diffDem"),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv2 <- mapview::mapview(xy.nad, zcol = c("diffDem"),
map.types = c("Esri.WorldImagery"),
legend = T)
mapview::mapshot(mv2, file = "Hmsc_CD/local/plots/dem_map.PNG")
wd <- here::here()
wd
setwd(wd)
dir()
library(sf)
library(raster)
# EPSG:32610 # WGS 84 / UTM zone 10N
utm10N <- 32610
# EPSG:4269 # NAD 83
nad83 <- 4269
# import site data
# (follows quantiles of prevalence - as in models of 20201209 - see S2_define_models.r)
# get data
source("Hmsc_CD/local/L1_read_data.r")
rm(Y.train.pa, Y.train.qp, P)
head(S.train)
xy.sf <- st_as_sf(S.train, coords = c("UTM_E", "UTM_N"), crs = utm10N)
# transform to NAD (for now, quicker than projecting raster)
xy.nad <- st_transform(xy.sf, crs = nad83)
# import raster elevation data
terr <- brick("J:/UEA/Oregon/gis/r_nad/terrain.tif")
terr
names(terr) <- c("dem", "tri")
plot(terr)
# extract point elevation data
dem.pts <- raster::extract(terr, xy.nad)
colnames(dem.pts) <- c("dem.pt", "tri.pt")
head(dem.pts)
dem.500m <- raster::extract(terr, xy.nad, buffer = 500, fun = mean) # units in m for unprojected data
head(dem.500m)
# add elevation data per point to xy
xy.nad <- cbind(xy.nad, dem.pts)
xy.nad$dem500 <- dem.500m[,"dem"]
xy.nad$diffDem <- abs(xy.nad$dem500 - xy.nad$dem.pt)
plot(xy.nad$tri.pt, xy.nad$diffDem)
xy.nad
hist(xy.nad$dem.pt)
hist(xy.nad$diffDem)
library(mapview)
mv <- mapview(xy.nad, zcol = c("diffDem", "tri.pt"),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv
mapshot(mv, file = "Hmsc_CD/local/plots/dem_map.html")
library(leafpop)
mapshot(mv, file = "Hmsc_CD/local/plots/dem_map.html")
mapshot(mv, file = "Hmsc_CD/local/plots/dem_map.html", selfcontainted = TRUE)
save(xy.nad, file = "Hmsc_CD/local/xy_nad.rdata")
remotes::install_github("r-spatial/mapview")
libary(mapview)
library(mapview)
citation("mapview")
load("Hmsc_CD/local/xy_nad.rdata")
mv <- mapview(xy.nad, zcol = c("diffDem", "tri.pt"),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv
mapshot(mv, file = "Hmsc_CD/local/plots/dem_map.html", selfcontainted = TRUE)
webshot::install_phantomjs()
mapshot(mv, file = "dem_map.html")
getwd()
mapshot(mv, file = "Hmsc_CD/local/plots/dem_map.html", selfcontainted = TRUE)
file.path(getwd(), "Hmsc_CD/local/plots/dem_map.html")
mapshot(mv, file = file.path(getwd(), "Hmsc_CD/local/plots/dem_map.html"), selfcontainted = TRUE)
mapshot(mv, url = "dem_map.html")
mapshot(mv, url = "Hmsc_CD/local/plots/dem_map.html", selfcontainted = TRUE)
mapshot(mv, url = "dem_map.html", selfcontainted = TRUE)
mapview::mapshot(mv2, file = "Hmsc_CD/local/plots/dem_map.png")
mv2 <- mapview::mapview(xy.nad, zcol = c("diffDem"),
map.types = c("Esri.WorldImagery"),
legend = T)
mapview::mapshot(mv2, file = "Hmsc_CD/local/plots/dem_map.png")
mapviewOptions(fgb = FALSE)
mapshot(mv, url = "Hmsc_CD/local/plots/dem_map.html", selfcontainted = TRUE) # only works in wd at moment. moved from there.
xy.nad
x1 <- ~mapshot(mv2, file = "Hmsc_CD/local/plots/dem_map.png")
load("Hmsc_CD/local/ecocopula_modList_pilot.rdata") # fm, cor.preds, modList
source("Hmsc_CD/local/ecoCopula_plot_fn.r")## modified plot functions...
mod <- modList[[1]]$mod
sp_res <- modList[[1]]$sp
site_res <- modList[[1]]$site
alpha <- 4*0.95
plot(mod)
i = 1
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res)
source("Hmsc_CD/local/ecoCopula_plot_fn.r")## modified plot functions...
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res)
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res)
p4 <- plot_xy_factor2("pa", "", site_res)
pB <- plot_grid(p3, x1) # p4
library(ggplot2)
library(cowplot)
pB <- plot_grid(p3, x1) # p4
pB
library(ggplot2)
library(cowplot)
load("Hmsc_CD/local/ecocopula_modList_pilot.rdata") # fm, cor.preds, modList
source("Hmsc_CD/local/ecoCopula_plot_fn.r")## modified plot functions...
mod <- modList[[1]]$mod
str(mod, max.level = 1)
source("Hmsc_CD/local/L1_read_data.r")
rm(Y.train.qp, Y.train.pa, X.train, env.vars, otu.pa.csv, otu.qp.csv)
rm(Y.train.qp, Y.train.pa, X.train, env.vars, otu.pa.csv, otu.qp.csv,P)
head(S.train)
scoresList <- lapply(modList, function(x) x["scores"])
scoresList
scoresList <- lapply(modList, function(x) x$ord["scores"])
scoresList
scoresList <- lapply(modList, function(x) x$ord["scores"][,c("Factor1")])
scoresList <- lapply(modList, function(x) x$ord["scores"][("Factor1")])
scoresList
scoresList <- lapply(modList, function(x) x$ord["scores"])
modList[[1]]$ord$scores
str(modList[[1]]$ord$scores)
scoresList <- lapply(modList, function(x) x$ord$scores)
scoresList
str(modList[[1]]$ord$scores)
scoresList <- lapply(modList, function(x) x$ord$scores["Factor1"])
scoresList <- lapply(modList, function(x) x$ord$scores[,"Factor1"])
scores <- do.call(cbind, scoresList)
colnames(scores) <- sprintf("mod%01d", seq_along(modList))
factor.sf <- S.train %>%
cbind(scores)
factor.sf
st_as_sf(coords = c("UTM_E", "UTM_N"), crs = 32610)
factor.sf <- S.train %>%
cbind(scores) %>%
sf::st_as_sf(coords = c("UTM_E", "UTM_N"), crs = 32610)
factor.sf
mv <- mapview(xy.nad, zcol = sprintf("mod%01d", seq_along(modList)),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv <- mapview(factor.sf, zcol = sprintf("mod%01d", seq_along(modList)),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv
mv1 <- mapview(factor.sf, zcol = sprintf("mod%01d", seq_along(modList)),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mapshot(mv1, url = "Hmsc_CD/local/plots/factor_map.html", selfcontainted = TRUE)
mapshot(mv1, url = "factor_map.html", selfcontainted = TRUE)
mv1 <- mapview(factor.sf, zcol = sprintf("mod%01d", seq_along(modList)),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T, hide = TRUE)
mapshot(mv1, url = "Hmsc_CD/local/plots/factor_map.html", selfcontainted = TRUE)
factor.sf[, sprintf("mod%01d", seq_along(modList))]
mv1 <- mapview(factor.sf[, sprintf("mod%01d", seq_along(modList))], burst = TRUE, hide = TRUE,
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv1
mv2 <- mapview(factor.sf[, sprintf("mod%01d", seq_along(modList))], burst = TRUE, hide = TRUE,
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv2 <- mapview(factor.sf[, sprintf("mod%01d", seq_along(modList))], burst = TRUE, hide = TRUE,
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv2
mv2@map <- mv2@map %>% leaflet::hideGroup(group = "mod2")
mv2
mv2 <- mapview(factor.sf[, sprintf("mod%01d", seq_along(modList))], burst = TRUE, hide = TRUE,
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T)
mv2@map <- mv2@map %>% leaflet::hideGroup(group = c("mod2", "mod3"))
mv2
mv1 <- mapview(factor.sf, zcol = sprintf("mod%01d", seq_along(modList)),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T, hide = TRUE)
mv1@map <- mv1@map %>% leaflet::hideGroup(group = sprintf("mod%01d", seq_along(modList))
)
mv1
mv1 <- mapview(factor.sf, zcol = sprintf("mod%01d", seq_along(modList)),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT"),
legend = T, hide = TRUE)
sprintf("mod%01d", seq_along(modList))[-1]
mv1@map <- mv1@map %>% leaflet::hideGroup(group = sprintf("mod%01d", seq_along(modList))[-1])
mv1
mapshot(mv1, url = "factor_map.html", selfcontainted = TRUE)
source("Hmsc_CD/local/fn_ecoCopula_plot.r")## modified plot functions...
load("Hmsc_CD/oregon_ada/data/demStats.rdata") # temporary location for moment...
head(dem_stats)
(fn <- list.files(pattern = "^fn_.*\\.r", recursive = TRUE))
library(Hmsc)
(fn <- list.files(pattern = "^fn_.*\\.r", recursive = TRUE))
list.files(pattern = "^fn_.*\\.r", recursive = TRUE)
source("Hmsc_CD/local/fn_getAUC.r")
resF <- list.files("Hmsc_CD/oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
resF
rf <- resF[length(resF)]
rf
auc.df <- getAUC(rf, rMod = FALSE)
mod.df <- getAUC(rf, rMod = TRUE)
mod.df
resF <- list.files("oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
resF
getwd()
resF <- list.files("Hmsc_CD/oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
resF
resF <- resF[1:2]
rF <- resF[1:2]
resF <- list.files("Hmsc_CD/oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
rF <- resF[1:2]
modRes <- lapply(rF, getAUC, rMod = TRUE)
all.df <- do.call(rbind, modRes)
head(all.df)
rm(mod.df, modRes, resF, rF)
all.df <- all.df[order(all.df$AUC_pred, decreasing = TRUE),]
head(all.df)
source("Hmsc_CD/local/fn_getAUC.r")
modRes <- lapply(rF, getAUC, rMod = TRUE)
resF <- list.files("Hmsc_CD/oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
rF <- resF[!resF %in% c("Hmsc_CD/oregon_ada/results/res20210107_01",
rF <- resF[1:2]
modRes <- lapply(rF, getAUC, rMod = TRUE)
source("Hmsc_CD/local/fn_getAUC.r")
resF <- list.files("Hmsc_CD/oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
rF <- resF[1:2]
modRes <- lapply(rF, getAUC, rMod = TRUE)
all.df <- do.call(rbind, modRes)
head(all.df)
rm(mod.df, modRes, resF, rF)
all.df <- all.df[order(all.df$AUC_pred, decreasing = TRUE),]
head(all.df)
resF <- list.files("Hmsc_CD/oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
rF <- resF[!resF %in% c("Hmsc_CD/oregon_ada/results/res20210107_01",
"Hmsc_CD/oregon_ada/results/res20201217_01"
)]
modRes <- lapply(rF, getAUC, rMod = TRUE)
resF
rF <- resF[!resF %in% c("Hmsc_CD/oregon_ada/results/res20210107_01",
"Hmsc_CD/oregon_ada/results/res20201217_01",
"Hmsc_CD/oregon_ada/results/res20201216_02"
)]
modRes <- lapply(rF, getAUC, rMod = TRUE)
for(r in resF) getAUC(r, rMod = TRUE)
for(r[4:11] in resF) getAUC(r, rMod = TRUE)
for(r in resF[4:11]) getAUC(r, rMod = TRUE)
for(r in resF[6:11]) getAUC(r, rMod = TRUE)
resF
for(r in resF[7:11]) getAUC(r, rMod = TRUE)
rF <- resF[!resF %in% c("Hmsc_CD/oregon_ada/results/res20210107_01",
"Hmsc_CD/oregon_ada/results/res20201217_01",
"Hmsc_CD/oregon_ada/results/res20201127_01",
"Hmsc_CD/oregon_ada/results/res20201204_01", # qp
"Hmsc_CD/oregon_ada/results/res20201209_01", # qp
"Hmsc_CD/oregon_ada/results/res20201216_02" # error
)]
modRes <- lapply(rF, getAUC, rMod = TRUE)
all.df <- do.call(rbind, modRes)
head(all.df)
rm(modRes, resF, rF)
all.df <- all.df[order(all.df$AUC_pred, decreasing = TRUE),]
head(all.df)
tail(all.df)
head(all.df)
source("Hmsc_CD/local/fn_getAUC.r")
resF <- list.files("Hmsc_CD/oregon_ada/results", pattern = "res\\d*_\\d{2}$", include.dirs = TRUE, full.names = T)
resF
rF <- resF[!resF %in% c("Hmsc_CD/oregon_ada/results/res20210107_01",
"Hmsc_CD/oregon_ada/results/res20201217_01",
"Hmsc_CD/oregon_ada/results/res20201127_01",
"Hmsc_CD/oregon_ada/results/res20201204_01", # qp
"Hmsc_CD/oregon_ada/results/res20201209_01", # qp
"Hmsc_CD/oregon_ada/results/res20201216_02" # error
)]
modRes <- lapply(rF, getAUC, rMod = TRUE)
all.df <- do.call(rbind, modRes)
head(all.df)
rm(modRes, resF, rF)
all.df <- all.df[order(all.df$AUC_pred, decreasing = TRUE),]
head(all.df)
load("Hmsc_CD/local/ecocopula_modList_pilot.rdata") # fm, cor.preds, modList
source("Hmsc_CD/local/fn_ecoCopula_plot.r")## modified plot functions...
alpha <- 4*0.95
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res)
## correlation plot
i = 1
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res)
## correlation plot
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res)
p4 <- plot_xy_factor2("pa", "", site_res)
pA <- plot_grid(p2, p1, rel_widths = c(4,5), align = "h", axis = "t")
pB <- plot_grid(p3, p4) # p4
title <- ggdraw() +
draw_label(modName, fontface = 'bold', size = 18, x = 0.1, y = 0.5, hjust = 0)
m1 <- plot_grid(pA, pB, title, nrow = 3, rel_heights = c(4,5,1))
m1
for(i in seq_along(modList)){
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res)
## correlation plot
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res)
p4 <- plot_xy_factor2("pa", "", site_res)
# put rows together
pA <- plot_grid(p2, p1, rel_widths = c(4,5), align = "h", axis = "t")
pB <- plot_grid(p3, p4) # p4
title <- ggdraw() +
draw_label(modName, fontface = 'bold', size = 18, x = 0.15, y = 0.5, hjust = 0)
m1 <- plot_grid(pA, pB, title, nrow = 3, rel_heights = c(4,5,1))
# m1 <- plot_grid(pA, pB, nrow = 2, rel_heights = c(4,5))
# m1
ggsave(paste0("Hmsc_CD/local/plots/mod", i, ".png"), m1, width = 300, height = 250, units = "mm")
}
for(i in seq_along(modList)){
mod <- modList[[i]]$mod
mod.ord <- modList[[i]]$ord
sp_res <- modList[[i]]$sp
site_res <- modList[[i]]$site
# chk residuals
# plot(mod)
modName <- paste0("predictors: ", as.character(fm[[i]])[3])
#plot factors
p1 <- plot_factors(alpha, "pa", "", sp_res, site_res)
## correlation plot
mod.cor <- cor(mod.ord$scores, site_res[,cor.preds])
p2 <- ~t_corrplot(mod.cor, "")
# Plot over coords with factors as colour fill
p3 <- plot_xy_factor1("pa", "", site_res)
p4 <- plot_xy_factor2("pa", "", site_res)
# put rows together
pA <- plot_grid(p2, p1, rel_widths = c(4,5), align = "h", axis = "t")
pB <- plot_grid(p3, p4) # p4
title <- ggdraw() +
draw_label(modName, fontface = 'bold', size = 15, x = 0.0, y = 0.5, hjust = 0)
m1 <- plot_grid(pA, pB, title, nrow = 3, rel_heights = c(4,5,1))
# m1 <- plot_grid(pA, pB, nrow = 2, rel_heights = c(4,5))
# m1
ggsave(paste0("Hmsc_CD/local/plots/mod", i, ".png"), m1, width = 300, height = 250, units = "mm")
}
terr <- brick("J:/UEA/Oregon/gis/r_nad/terrain.tif")
library(raster)
terr <- brick("J:/UEA/Oregon/gis/r_nad/terrain.tif")
names(terr) <- c("dem", "tri")
plot(terr)
plot(terr$tri, breaks = c(0,10,20,30,40))
