rm(to, rScripts)
file.path("results", resFolder, "data", "allData.Rdata")
file.path(modFolder, "unfitted_models.rdata")
save(models, modelnames, file = file.path(modFolder, "unfitted_models.rdata"))
fs <- list.files(modFolder, "models_thin.*", full.names = TRUE)
fs
modFolder
samples_list = c(5)
thin_list = c(1)
nChains <- 2
nChains <- 1
source("code/S3_fit_models.r")
paste(modFolder, "/models_thin_", as.character(thin), # modFolder is from S00_pipeline
"_samples_", as.character(samples),
"_chains_",as.character(nChains),
".Rdata", sep = "")
source("code/S3_fit_models.r")
rm(Lst, fs, model,m, nm, samples, thin)
rm(Lst, fs, model,m, nm, samples, thin, filename)
rm(samples_list, thin_list, nChains)
fs <- list.files(modFolder, "models_thin.*", full.names = TRUE)
fs
fs <- list.files(modFolder, "models_thin.*", full.names = TRUE)
filename = fs[i]
i = 1;
filename = fs[i]
load(filename)
source("code/S4_evaluate_convergence.r")
load(file = file.path(modFolder, "unfitted_models.rdata")) #models, modelnames
models
source("code/S2_define_models.r")
samples_list = c(5)
thin_list = c(1)
nChains <- 2
source("code/S3_fit_models.r")
rm(samples_list, thin_list, nChains)
fs <- list.files(modFolder, "models_thin.*", full.names = TRUE)
source("code/S4_evaluate_convergence.r")
models
fs <- list.files(modFolder, "models_thin.*", full.names = TRUE)
fs
fs <- list.files(modFolder, "models_thin.*", full.names = TRUE)
source("code/S4_evaluate_convergence.r")
save(beta, file = "beta_list.rdata")
vioP <- require(vioplot)
pdf(file = "MCMC_convergence%03d.pdf")
par(mfrow=c(2,1), mar = c(10,3,1,1))
# remove NAs coming through from try errors first:
if(vioP) sapply(beta[!is.na(beta)], vioplot::vioplot, las = 2) else sapply(beta[!is.na(beta)], boxplot, las = 2)
dev.off()
nfolds = 2
fs <- list.files("models", "^models_thin.*", full.names = TRUE)
fs
fs <- list.files(modFolder, "^models_thin.*", full.names = TRUE)
fs
filename = fs[i]
filename
print(filename)
nChains <- as.numeric(sub(".*_chains_([[:digit:]]{1}).*", "\\1", filename))
load(filename)
MF = list()
MFCV = list()
WAIC = list()
m.names <- paste0(modelnames, sub(".*_thin_([[:digit:]]*)_samples_([[:digit:]]*)_.*", "_\\1_\\2", filename))
m.names
names(WAIC) <- names(MFCV) <- names(MF) <- m.names
filename_out <- file.path(dirname(filename), paste0("MF_", sub("^models_", "", basename(filename))))
filename_out
source("code/S5_compute_model_fit.r")
setwd("J:/UEA/Oregon/Oproject/oregon_ada")
resFolder <- paste0("res", format(Sys.Date(), "%Y%m%d"))
resFolder <- paste(resFolder, sprintf("%02d", sum(grepl(resFolder, list.dirs("results", recursive= F)))+1), sep="_")
print(resFolder)
dir.create(file.path("results", resFolder))
dir.create(file.path("results", resFolder, "code"))
dir.create(file.path("results", resFolder, "data"))
dir.create(file.path("results", resFolder, "models"))
modFolder <- file.path("results", resFolder, "models")
modFolder
# copy scripts, etc
rScripts <- list.files("code", pattern = "S[1-5].*\\.[rR]$", recursive = TRUE, full.names = TRUE)
rScripts
to <- file.path("results", resFolder, rScripts)
file.copy(rScripts, to)
rm(to, rScripts)
## 1. Read data ####
source("code/S1_read_data.r")
# Save in specific data folder
# ## Set working director to current results
# setwd(paste0("~/oregon_ada/results/", resFolder))
# # setwd(paste0("./results/", resFolder)) # local only
# getwd()
# dir()
# save data
save(SXY.train, S.train, X.train, Y.train, P, file = file.path("results", resFolder, "data", "allData.Rdata"))
## 2. define models ####
source("code/S2_define_models.r")
save(models, modelnames, file = file.path(modFolder, "unfitted_models.rdata"))
## 3 Fit models #####
# uses models list from 2.
# samples_list = c(5,250,250,250,250,250)
# thin_list = c(1,1,10,100,1000,10000)
# samples_list = c(5,100,250)
# thin_list = c(1,5,10)
samples_list = c(5)
thin_list = c(1)
nChains <- 2
source("code/S3_fit_models.r")
# models saves in S3
rm(samples_list, thin_list, nChains)
### 4 Convergence ####
# fs is the list of model filenames
fs <- list.files(modFolder, "models_thin.*", full.names = TRUE)
source("code/S4_evaluate_convergence.r")
#save results
save(beta, file = file.path(resFolder, "beta_list.rdata"))
vioP <- require(vioplot)
pdf(file = file.path(resFolder, "MCMC_convergence%03d.pdf"))
par(mfrow=c(2,1), mar = c(10,3,1,1))
# remove NAs coming through from try errors first:
if(vioP) sapply(beta[!is.na(beta)], vioplot::vioplot, las = 2) else sapply(beta[!is.na(beta)], boxplot, las = 2)
dev.off()
## 5 Compute model fit ####
nfolds = 2
fs <- list.files(modFolder, "^models_thin.*", full.names = TRUE)
source("code/S5_compute_model_fit.r")
samples_list = c(5,100,250)
thin_list = c(1,5,10)
(samples_list * thin_list) + ceiling(0.5*thin_list*samples_list)
resFolder <- "res20201127_01"
modFolder <- file.path("results", resFolder, "models")
setwd("J:/UEA/Oregon/Oproject/oregon_ada")
resFolder <- "res20201127_01"
modFolder <- file.path("results", resFolder, "models")
fs <- list.files(modFolder, "^models_thin.*", full.names = TRUE)
fs
i = 1
filename = fs[i]
print(filename)
nChains <- as.numeric(sub(".*_chains_([[:digit:]]{1}).*", "\\1", filename))
load(filename)
seq_along(models)
m.names <- paste0(modelnames, sub(".*_thin_([[:digit:]]*)_samples_([[:digit:]]*)_.*", "_\\1_\\2", filename))
m.names
filename_out <- file.path(dirname(filename), paste0("MF_", sub("^models_", "", basename(filename))))
filename_out
i = 2
filename = fs[i]
print(filename)
nChains <- as.numeric(sub(".*_chains_([[:digit:]]{1}).*", "\\1", filename))
load(filename)
models
library(Hmsc)
models
i = 3
filename = fs[i]
print(filename)
load(filename)
models
file.path("results", resFolder, "code/S5_compute_model_fit.r")
nfolds = 5
filename_out <- file.path(dirname(filename), paste0("MF_", "CV", nfolds, sub("^models_", "", basename(filename))))
filename_out
filename_out <- file.path(dirname(filename), paste0("MF_", "CV", nfolds, "_", sub("^models_", "", basename(filename))))
filename_out
myLabs <- c(list.files("audio/templates/RT/randomExtracts2", "\\.txt$", recursive = T, full.names = T),
list.files("audio/templates/RT/randomExtracts3", "\\.txt$", recursive = T, full.names = T))
setwd("C:/Users/55116479/Dropbox (Manchester Met)/R_online/JavaR")
myLabs <- c(list.files("audio/templates/RT/randomExtracts2", "\\.txt$", recursive = T, full.names = T),
list.files("audio/templates/RT/randomExtracts3", "\\.txt$", recursive = T, full.names = T))
basLabs <- list.files("audio/templates/RT/labels_resent20202611", "\\.txt$", recursive = T, full.names = T)
head(basLabs)
head(myLabs)
myMissing <- basLabs[!basename(basLabs) %in% basename(myLabs)]
382-218
head(myMissing)
unique(dirnames(myMissing))
unique(dirname(myMissing))
head(myMissing)
to <- file.path("audio/templates/RT/randomExtracts_nT1_2", basename(myMissing))
head(to)
chk <- file.copy(from = myMissing, to = to, copy.date = T)
sum(chk)
sum(chk) == length(myMissing)
length(basLabs)-length(myLabs) == length(myMissing)
nT1_extr <- list.files("C:/Users/55116479/Dropbox (Manchester Met)/Java/Bas_recordings/testFiles2/newTest1",
"\\.wav$")
nT1_extr <- sub("(extr_[[:digit:]]*_.*)", "\\1",
list.files("C:/Users/55116479/Dropbox (Manchester Met)/Java/Bas_recordings/testFiles2/newTest1", "\\.wav$"))
nT1_extr <- sub("(extr_[[:digit:]]*)_.*", "\\1",
list.files("C:/Users/55116479/Dropbox (Manchester Met)/Java/Bas_recordings/testFiles2/newTest1", "\\.wav$"))
nT2_extr <- sub("(extr_[[:digit:]]*)_.*", "\\1",
list.files("C:/Users/55116479/Dropbox (Manchester Met)/Java/Bas_recordings/testFiles2/newTest2", "\\.wav$"))
allLabs <- list.files("audio/templates/RT/randomExtracts_ntT1_2", "\\.txt$", recursive = T, full.names = T)
allLabs <- list.files("audio/templates/RT/randomExtracts_nT1_2", "\\.txt$", recursive = T, full.names = T)
grepl(nT1_extr,allLabs)
apply(nT1_extr, function(x) any(grepl(x, allLabs)))
sapply(nT1_extr, function(x) any(grepl(x, allLabs)))
tmp <- sapply(nT1_extr, function(x) any(grepl(x, allLabs)))
sapply(allLabs, function(x) any(sapply(nt1Labs, grepl, text = x)))
sapply(allLabs, function(x) any(sapply(nt1_extr, grepl, text = x)))
sapply(allLabs, function(x) any(sapply(nT1_extr, grepl, text = x)))
sapply(allLabs, function(x) any(sapply(nT1_extr, grepl, x = x)))
tmp <- sapply(allLabs, function(x) any(sapply(nT1_extr, grepl, x = x)))
nt1Labs <- allLabs[sapply(allLabs, function(x) any(sapply(nT1_extr, grepl, x = x)))]
nt2Labs <- allLabs[sapply(allLabs, function(x) any(sapply(nT2_extr, grepl, x = x)))]
head(nt1Labs)
chk1 <- copy.files(from, to = file.path("audio/templates/RT/randomExtracts2", basename(nt1Labs)), copy.date = T)
head(nt1Labs)
file.path("audio/templates/RT/randomExtracts2", basename(nt1Labs))
chk1 <- file.copy(from = nt1Labs, to = file.path("audio/templates/RT/randomExtracts2", basename(nt1Labs)), copy.date = T)
sum(chk1)
chk2 <- file.copy(from = nt2Labs, to = file.path("audio/templates/RT/randomExtracts3", basename(nt2Labs)), copy.date = T)
sum(chk2)
labsFin <- c(list.files("audio/templates/RT/randomExtracts1", "\\.txt$", recursive = T, full.names = T),
list.files("audio/templates/RT/randomExtracts2", "\\.txt$", recursive = T, full.names = T),
list.files("audio/templates/RT/randomExtracts3", "\\.txt$", recursive = T, full.names = T))
labsFold <- sub(".*(randomExtracts\\d).*", "\\1", labsFin)
table(labsFold)
r1_wavs <- list.files("audio/templates/RT/randomExtracts1", "\\.wav$", recursive = T, full.names = T)
r1_labs <- list.files("audio/templates/RT/randomExtracts1", "\\.txt$", recursive = T, full.names = T)
head(r1_wavs)
seq_along(r1_wavs)
i = 1
basename(r1_wavs[i])
nName1 <- file.path("randomExtracts1_1", sub("\\.wav$", "", paste0(basename(r1_wavs[i])), "_pt1", ".wav"))
nName1
sub("\\.wav$", "", basename(r1_wavs[i]))
paste0(sub("\\.wav$", "", basename(r1_wavs[i])), "_pt1", ".wav")
sub("(extr_\\d*)_(.*)", "\\1_pt1\\2", basename(r1_wavs[i]))
sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", basename(r1_wavs[i]))
name_w1 <- file.path("audio/templates/RT/randomExtracts1_1", sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", basename(r1_wavs[i])))
name_w2 <- file.path("audio/templates/RT/randomExtracts1_2", sub("(extr_\\d*)_(.*)", "\\1_pt2_\\2", basename(r1_wavs[i])))
name_w1
name_w2
i = 1
name_w1 <- file.path("audio/templates/RT/randomExtracts1_1", sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", basename(r1_wavs[i])))
name_w2 <- file.path("audio/templates/RT/randomExtracts1_2", sub("(extr_\\d*)_(.*)", "\\1_pt2_\\2", basename(r1_wavs[i])))
w1 <- tuneR::readWave(r1_wavs[i], from = 0, to = 15, units = "seconds")
w2 <- tuneR::readWave(r1_wavs[i], from = 16, to = 30, units = "seconds")
w1
w2
w2 <- tuneR::readWave(r1_wavs[i], from = 15, to = 30, units = "seconds")
w1 <- tuneR::readWave(r1_wavs[i], from = 1, to = 15, units = "seconds")
w2 <- tuneR::readWave(r1_wavs[i], from = 15, to = 30, units = "seconds")
w1
w1 <- tuneR::readWave(r1_wavs[i], from = 0, to = 15, units = "seconds")
w2 <- tuneR::readWave(r1_wavs[i], from = 15, to = 30, units = "seconds")
w1
w2
tuneR::writeWave(w1, filename = name_w1, extensible = FALSE) # OJO...
tuneR::writeWave(w2, filename = name_w2, extensible = FALSE) # OJO...
head(r1_labs)
source("https://raw.githubusercontent.com/Cdevenish/R-Material/master/Functions/Audio/readLabels.r")
dfLabs <- readLabels(r1_labs, rename =F, includeErrors = T)
dfLabs[[2]]
audacity.read <- function(x){
labs <- read.table(x, header = F, sep = "\t", stringsAsFactors= F)
e.ind <- seq(2,nrow(labs),2)
o.ind <- seq(1,nrow(labs),2)
res <- cbind(labs[o.ind,], labs[e.ind, 2:3])
colnames(res) <- c("start", "stop", "name", "minFreq", "maxFreq")
res <- data.frame(path = x,
id  = basename(x),
name = res$name,
lapply(res[-3], as.numeric),
stringsAsFactors = F)
}
dfLabs <- do.call(rbind, lapply(r1_labs, audacity.read))
head(dfLabs)
summary(dfLabs)
labErrors <- readLabels(r1_labs, rename =F, includeErrors = T)
655+17
labErrors[[2]]
wav.info <- tuneR::readWave(r1_wavs, header = TRUE)
wav.info <- lapply(r1_wavs, tuneR::readWave, header = TRUE)
wav.info[[1]]
wav.duration <- sapply(wav.info, function(x) x["samples"]/x["sample.rate"])
wav.duration <- sapply(wav.info, function(x) x[["samples"]]/x[["sample.rate"]])
which(wav.duration != 30)
ind <- which(wav.duration != 30)
wav.info[ind]
wav.duration[ind]
r1_wavs[66]
r1_wavs <- list.files("audio/templates/RT/randomExtracts1", "\\.wav$", recursive = T, full.names = T)
r1_labs <- list.files("audio/templates/RT/randomExtracts1", "\\.txt$", recursive = T, full.names = T)
head(r1_wavs)
wav.info <- lapply(r1_wavs, tuneR::readWave, header = TRUE)
wav.info[[1]]
wav.duration <- sapply(wav.info, function(x) x[["samples"]]/x[["sample.rate"]])
ind <- which(wav.duration != 30)
sum(wav.duration != 30)
dfLabs <- do.call(rbind, lapply(r1_labs, audacity.read))
head(dfLabs)
summary(dfLabs)
which(dfLabs$start > 30)
which(dfLabs$stop > 30)
dfLabs[99,]
r1_wavs <- list.files("audio/templates/RT/randomExtracts1", "\\.wav$", recursive = T, full.names = T)
r1_labs <- list.files("audio/templates/RT/randomExtracts1", "\\.txt$", recursive = T, full.names = T)
dfLabs <- do.call(rbind, lapply(r1_labs, audacity.read))
head(dfLabs)
summary(dfLabs)
which(dfLabs$start > 30)
which(dfLabs$stop > 30)
head(dfLabs)
pt2 <- subset(dfLabs, start > 15 | stop > 15)
summary(pt2)
pt2[which.min(pt2$start),]
pt2$start[pt2$start < 15] <- 0
pt2$start[pt2$start != 0] <- pt2$start - 15
pt2 <- subset(dfLabs, start > 15 | stop > 15)
pt2[which.min(pt2$start),]
pt2$start[pt2$start < 15] <- 0
pt2$start[pt2$start != 0] <- pt2$start[pt2$start != 0] - 15
pt2$stop <- pt2$stopt - 15
pt2$stop <- pt2$stop - 15
pt2 <- subset(dfLabs, start > 15 | stop > 15)
summary(pt2)
pt2[which.min(pt2$start),]
# set all starts < 15 to 0
pt2$start[pt2$start < 15] <- 0
# adjust start/stop times to start at 0
pt2$start[pt2$start != 0] <- pt2$start[pt2$start != 0] - 15
pt2$stop <- pt2$stop - 15
summary(pt2)
pt1 <- subset(dfLabs, start < 15)
pt1$stop[pt1$stop > 15] <- 15
summary(pt1)
pt1 <- subset(dfLabs, start < 15)
summary(pt1)
# set all stops > 15 to 15
pt1$stop[pt1$stop > 15] <- 15
summary(pt1)
tmp2 <- pt1 <- split(pt1, pt1$id)
tmp2[[1]]
x <- tmp2[[1]]
paste0(x["start"], x["stop"], x["species"], "\n", "\\", x["minFreq"], x["maxFreq"], sep = "\t")
paste0(x[["start"]], x[["stop"]], x[["species"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t")
paste(x[["start"]], x[["stop"]], x[["species"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t")
cat(paste(x[["start"]], x[["stop"]], x[["species"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t"))
cat(paste(x[["start"]], x[["stop"]], x[["name"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t"))
cat(paste(x[["start"]], x[["stop"]], x[["name"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], "\n", sep = "\t"))
writeLines(paste(x[["start"]], x[["stop"]], x[["name"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], "\n", sep = "\t"),
con = "tmp.txt")
writeLines(paste(x[["start"]], x[["stop"]], x[["name"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t"),
con = "tmp.txt")
cat(paste(x[["start"]], x[["stop"]], x[["name"]], sep = "\t"), paste("\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t"))
c(paste(x[["start"]], x[["stop"]], x[["name"]], sep = "\t"), paste("\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t"))
writeLines(c(paste(x[["start"]], x[["stop"]], x[["name"]], sep = "\t"),
paste("\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t")),
con = "tmp.txt")
writeLines(c(paste(x[["start"]], x[["stop"]], x[["name"]], sep = "\t"),
paste("\\", x[["minFreq"]], x[["maxFreq"]], sep = "\t")),
con = "tmp.txt")
cat(paste(x[["start"]], x[["stop"]], x[["name"]], "\n", "\\", x[["minFreq"]], x[["maxFreq"]], "\n", sep = "\t"))
paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n", "\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]])
cat(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n", "\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]))
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n", "\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = "tmp.txt")
tmp1 <- pt1 <- split(pt1, pt1$id)
tmp1[[1]]
pt1 <- subset(dfLabs, start < 15)
summary(pt1)
# set all stops > 15 to 15
pt1$stop[pt1$stop > 15] <- 15
summary(pt1)
# rewrite times of second half to t1-15 with floor at 0.
pt2 <- subset(dfLabs, start > 15 | stop > 15)
summary(pt2)
pt2[which.min(pt2$start),]
# set all starts < 15 to 0
pt2$start[pt2$start < 15] <- 0
# adjust start/stop times to start at 0
pt2$start[pt2$start != 0] <- pt2$start[pt2$start != 0] - 15
pt2$stop <- pt2$stop - 15
summary(pt2)
tmp1 <- split(pt1, pt1$id)
tmp1[[1]]
x <- tmp1[[1]]
cat(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n", "\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]))
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n", "\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = "tmp.txt")
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n", "\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = "tmp.txt")
tmp1[[1]]
file.path("audio/templates/RT/randomExtracts1_1",
sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", unique(x[["id"]])))
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n",
"\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = file.path("audio/templates/RT/randomExtracts1_1",
sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", unique(x[["id"]]))))
tmp2 <- split(pt2, pt2$id)
x <- tmp2[[1]]
x
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n",
"\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = file.path("audio/templates/RT/randomExtracts1_1",
sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", unique(x[["id"]]))))
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n",
"\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = file.path("audio/templates/RT/randomExtracts1_2",
sub("(extr_\\d*)_(.*)", "\\1_pt2_\\2", unique(x[["id"]]))))
i = 2
name_w1 <- file.path("audio/templates/RT/randomExtracts1_1", sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", basename(r1_wavs[i])))
name_w2 <- file.path("audio/templates/RT/randomExtracts1_2", sub("(extr_\\d*)_(.*)", "\\1_pt2_\\2", basename(r1_wavs[i])))
name_w1
name_w2 <- file.path("audio/templates/RT/randomExtracts1_2", sub("(extr_\\d*)_(.*)", "\\1_pt2_\\2", basename(r1_wavs[i])))
w1 <- tuneR::readWave(r1_wavs[i], from = 0, to = 15, units = "seconds")
w2 <- tuneR::readWave(r1_wavs[i], from = 15, to = 30, units = "seconds")
w1
w2
tuneR::writeWave(w1, filename = name_w1, extensible = FALSE) # OJO...
tuneR::writeWave(w2, filename = name_w2, extensible = FALSE) # OJO...
x <- tmp1[[2]]
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n",
"\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = file.path("audio/templates/RT/randomExtracts1_1",
sub("(extr_\\d*)_(.*)", "\\1_pt1_\\2", unique(x[["id"]]))))
x <- tmp2[[2]]
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n",
"\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = file.path("audio/templates/RT/randomExtracts1_2",
sub("(extr_\\d*)_(.*)", "\\1_pt2_\\2", unique(x[["id"]]))))
pt2 <- subset(dfLabs, start >= 15 | stop > 15)
summary(pt2)
pt2[which.min(pt2$start),]
pt2$start <- pt2$start - 15
pt2$stop <- pt2$stop - 15
summary(pt2)
pt2$start[pt2$start < 0] <- 0
summary(pt2)
tmp1 <- split(pt1, pt1$id)
tmp2 <- split(pt2, pt2$id)
tmp2[[2]]
head(dfLabs)
split(dfLabs, dfLabs$id)[[2]]
tmp2[[2]]
x <- tmp2[[2]]
writeLines(paste0(x[["start"]], "\t", x[["stop"]], "\t", x[["name"]], "\n",
"\\", "\t", x[["minFreq"]], "\t", x[["maxFreq"]]),
con = file.path("audio/templates/RT/randomExtracts1_2",
sub("(extr_\\d*)_(.*)", "\\1_pt2_\\2", unique(x[["id"]]))))
labErrors[[2]]
r1_wavs <- list.files("audio/templates/RT/randomExtracts1", "\\.wav$", recursive = T, full.names = T)
r1_labs <- list.files("audio/templates/RT/randomExtracts1", "\\.txt$", recursive = T, full.names = T)
setwd("C:/Users/55116479/Dropbox (Manchester Met)/R_online/JavaR")
r1_wavs <- list.files("audio/templates/RT/randomExtracts1", "\\.wav$", recursive = T, full.names = T)
r1_labs <- list.files("audio/templates/RT/randomExtracts1", "\\.txt$", recursive = T, full.names = T)
head(r1_wavs)
wav.info <- lapply(r1_wavs, tuneR::readWave, header = TRUE)
wav.info[[1]]
wav.duration <- sapply(wav.info, function(x) x[["samples"]]/x[["sample.rate"]])
sum(wav.duration != 30)
audacity.read <- function(x){
labs <- read.table(x, header = F, sep = "\t", stringsAsFactors= F)
e.ind <- seq(2,nrow(labs),2)
o.ind <- seq(1,nrow(labs),2)
res <- cbind(labs[o.ind,], labs[e.ind, 2:3])
colnames(res) <- c("start", "stop", "name", "minFreq", "maxFreq")
res <- data.frame(path = x,
id  = basename(x),
name = res$name,
lapply(res[-3], as.numeric),
stringsAsFactors = F)
}
dfLabs <- do.call(rbind, lapply(r1_labs, audacity.read))
head(dfLabs)
summary(dfLabs)
which(dfLabs$start > 30)
which(dfLabs$stop > 30)
source("https://raw.githubusercontent.com/Cdevenish/R-Material/master/Functions/Audio/readLabels.r")
labErrors <- readLabels(r1_labs, rename =F, includeErrors = T)
labErrors[[2]]
nameCodes <- read.csv("inData/abbr_25112020.csv") # from abbr.xlsm in Bas recodings file on dropbox
abbr <- nameCodes$Abbr
labErrors <- readLabels(r1_labs, names2match = abbr, rename =F, includeErrors = T)
labErrors[[2]]
source("https://raw.githubusercontent.com/Cdevenish/R-Material/master/Functions/readLast.r")
source("https://raw.githubusercontent.com/Cdevenish/R-Material/master/Functions/readLast.csv.r")
nameCodes <- readLast.csv("inData", "abbr") # from abbr.xlsm in Bas recodings file on dropbox
setwd("C:/Users/55116479/Dropbox (Manchester Met)/R_online/JavaR")
source("https://raw.githubusercontent.com/Cdevenish/R-Material/master/Functions/readLast.csv.r")
source("https://raw.githubusercontent.com/Cdevenish/R-Material/master/Functions/w.xls.r")
source("https://raw.githubusercontent.com/Cdevenish/R-Material/master/Functions/Audio/readLabels.r")
dir("audio/templates")
dir("audio/templates/RT")
dir("inData")
nameCodes <- readLast.csv("inData", "abbr") # from abbr.xlsm in Bas recodings file on dropbox
sum(grepl(" ", nameCodes$Abbr))
nameCodes[grepl(" ", nameCodes)]
nameCodes[grepl(" ", nameCodes$Abbr)]
names2match <- nameCodes$Abbr
temp.fn <- list.files("audio/templates", "\\.txt$", full.names = T, recursive = T)
temp.fn <- temp.fn[grepl("RT\\/randomExtracts[123]", temp.fn)]
sum(grepl("RT\\/randomExtracts1", temp.fn))
sum(grepl("RT\\/randomExtracts2", temp.fn))
sum(grepl("RT\\/randomExtracts3", temp.fn))
table(sub(".*(randomExtracts\\d).*", "\\1", labsFin))
table(sub(".*(randomExtracts\\d).*", "\\1", temp.fn))
sum(grepl("RT\\/randomExtracts1", temp.fn))
sum(grepl("RT\\/randomExtracts2", temp.fn))
sum(grepl("RT\\/randomExtracts3", temp.fn))
labsR <- readLabels(temp.fn, names2match = names2match, includeErrors = T)
error.labs <- labsR[[2]]
error.labs$path[1]
error.labs$batch <- sub(".*randomExtracts(\\d).*", "\\1", error.labs$path)
error.labs$fn <- basename(error.labs$path)
head(error.labs)
table(error.labs$type)
table(error.labs[,c("type", "batch")])
w.xls(error.labs)
