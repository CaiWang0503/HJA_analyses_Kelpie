
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #### Model set up #### 
> 
> ## Christian D
> ## 12/11/2020
> 
> ## Only local: 
> # setwd("J:/UEA/Oregon")
> # dir()
> 
> ## On ADA
> ## getwd() will be "/gpfs/home/hsp20azu"
> # with folders Oregon, etc... 
> setwd("~/Oregon_winscp")
> dir()
 [1] "code"                         "data"                        
 [3] "models"                       "R-test-1015076.err"          
 [5] "R-test-1015076.out"           "R-test-1015251.err"          
 [7] "R-test-1015251.out"           "R-test-980547.err"           
 [9] "R-test-980547.out"            "results"                     
[11] "Rplots.pdf"                   "S1_incidence_read_data.Rout" 
[13] "S2_define_models.Rout"        "S3_fit_models.Rout"          
[15] "S4_evaluate_convergence.Rout" "S5_compute_model_fit.Rout"   
[17] "trial_hmsc.sub"              
> 
> 
> library(Hmsc)
Loading required package: coda
> 
> load(file = file.path("data", "allData.Rdata")) # S,X,Y,P & Tax (where P is based on Tax)
> 
> # Y = 518 Forest Malaise-trapped invertebrate taxa (quasi-probability species)
> # with a DNA spike-in standard used to estimate how a species' biomass
> # changes from sample to sample).
> 
> # Check for absent (0) or ubiquitous species (1).
> range(colMeans(Y.train > 0))
[1] 0.0000000 0.8390805
> min(colSums(Y.train > 0))
[1] 0
> # =5.
> 
> # Data reduction for the simple pilot model, included species with at least
> # observations only.
> 
> raretaxa <- which(colSums(Y.train > 0) < 10)
> length(raretaxa)
[1] 406
> 
> Y.train <- Y.train[, -raretaxa]
> 
> # any sites with no species?
> sum(rowSums(Y.train) == 0)
[1] 0
> 
> # hist(colMeans(Y.train > 0), main = "prevalence")
> 
> # Species richness across sites.
> # hist(rowSums(Y.train))
> 
> names(X.train)
 [1] "elevation"          "canopy.ht"          "min.T"             
 [4] "max.T"              "precipitation"      "metre.road"        
 [7] "metre.stream"       "yrs.disturb.min"    "hja"               
[10] "lysis.ratio"        "spike.mean"         "l_Cover_2m_4m"     
[13] "l_Cover_2m_4m_all"  "l_Cover_2m_max"     "l_Cover_2m_max_all"
[16] "l_Cover_4m_16m"     "l_p25"              "l_p25_all"         
[19] "l_p95"              "l_p95_all"          "l_rumple"          
[22] "mean.NDVI"          "mean.EVI"           "mean.bright"       
[25] "mean.green"         "mean.wet"          
> 
> # Mirkka: At Otso's suggestion, I have moved the S variable session into the XData, in order to include this as a fixed effect representing possible changes in community structure resulting from the effect of the regional fire.
> 
> # ONly single session now in this data.
> 
> # GIS XFormula set up for the pilot model, plus sampling session:.
> # elevation, canopy.ht, yrs.disturb.min
> 
> non.rs <- colnames(X.train)[!grepl("^l_|^mean", colnames(X.train))]
> pairs(X.train[,non.rs])
> 
> nrs <- c("elevation","canopy.ht","metre.road","metre.stream","yrs.disturb.min","hja") 
> # pairs(X.train[,nrs], lower.panel = panel.cor)
> 
> # hja - factor binary
> # log metre.road and yrs.disturb.min
> 
> # plot(X.train[, c("elevation", "canopy.ht", "yrs.disturb.min")])
> cor(X.train[, c("elevation", "canopy.ht", "metre.stream")])
              elevation   canopy.ht metre.stream
elevation     1.0000000 -0.14799087   0.21281219
canopy.ht    -0.1479909  1.00000000  -0.03375184
metre.stream  0.2128122 -0.03375184   1.00000000
> 
> XFormula <- ~ elevation + canopy.ht + metre.stream
> 
> rs_vars <- colnames(X.train)[grepl("^l_|^mean", colnames(X.train))]
> # rs_vars
> l_vars <- colnames(X.train)[grepl("^l_.*", colnames(X.train), perl = T)]
> l_vars
 [1] "l_Cover_2m_4m"      "l_Cover_2m_4m_all"  "l_Cover_2m_max"    
 [4] "l_Cover_2m_max_all" "l_Cover_4m_16m"     "l_p25"             
 [7] "l_p25_all"          "l_p95"              "l_p95_all"         
[10] "l_rumple"          
> vi_vars <- colnames(X.train)[grepl("^mean", colnames(X.train))]
> vi_vars
[1] "mean.NDVI"   "mean.EVI"    "mean.bright" "mean.green"  "mean.wet"   
> 
> # summary(X.train[,rs_vars])
> # pairs(X.train[,rs_vars], diag.panel = panel.hist, lower.panel = panel.cor)
> vi <- c("mean.EVI", "mean.bright", "mean.wet") # uncorrelated mainly
> 
> # pairs(X.train[,l_vars[!grepl("all", l_vars)]], diag.panel = panel.hist, lower.panel = panel.cor)
> lv <- c("l_Cover_2m_4m","l_Cover_2m_max","l_Cover_4m_16m","l_rumple")
> 
> # pairs(X.train[,lv], diag.panel = panel.hist, lower.panel = panel.cor)
> # pairs(X.train[,vi], diag.panel = panel.hist, lower.panel = panel.cor)
> 
> XRRRFormula <- as.formula(paste0("~ ", paste0(vi, collapse = " + "), "-1"))
> XRRRFormula
~mean.EVI + mean.bright + mean.wet - 1
> 
> # Note: X covariates are scaled in hmsc by default.
> # 94 sites with unique spatial coordinates, sampled during two time periods
> # and with Malaise traps M1
> 
> # S$site_trap_period is a unique sample code in the StudyDesign matrix, but is currently not included in the models.
> head(S.train)
   site_trap_period SiteName Route_x Route_y trap session
1       SM-04_M1_S1    SM-04  564940 4900934   M1      S1
3    HOBO-315_M1_S1 HOBO-315  565090 4901358   M1      S1
6    HOBO-308_M1_S1 HOBO-308  565355 4900444   M1      S1
8    HOBO-310_M1_S1 HOBO-310  566025 4900660   M1      S1
12   HOBO-312_M1_S1 HOBO-312  566147 4901320   M1      S1
15     622337_M1_S1   622337  564488 4892832   M1      S1
> length(unique(S.train$SiteName))
[1] 87
> length(unique(S.train$site_trap_period))
[1] 87
> 
> studyDesign <- data.frame(
+   site = as.factor(S.train$SiteName),
+   unique_sample = as.factor(S.train$site_trap_period)
+ )
> 
> xy <- data.frame(S.train[match(unique(S.train$SiteName), S.train$SiteName), c("Route_x", "Route_y")]) 
> # check for duplicated coordiantes>
> sum(duplicated(xy))
[1] 0
> rownames(xy) <- unique(S.train$SiteName)
> head(xy); tail(xy)
         Route_x Route_y
SM-04     564940 4900934
HOBO-315  565090 4901358
HOBO-308  565355 4900444
HOBO-310  566025 4900660
HOBO-312  566147 4901320
622337    564488 4892832
       Route_x Route_y
367193  558513 4895962
372502  557910 4895668
287338  559781 4899188
301004  559007 4898550
280500  560528 4899462
268355  560966 4899982
> 
> d <- dist(xy)
> ((87*87) - 87)/2
[1] 3741
> min(d)
[1] 448.7639
> # hist(d)
> 
> rL.site <- HmscRandomLevel(sData = xy)
> str(rL.site)
List of 17
 $ pi           : chr [1:87] "076361" "081090" "123545" "124031" ...
 $ s            :'data.frame':	87 obs. of  2 variables:
  ..$ Route_x: int [1:87] 564940 565090 565355 566025 566147 564488 562541 562145 563893 561397 ...
  ..$ Route_y: int [1:87] 4900934 4901358 4900444 4900660 4901320 4892832 4893290 4894663 4892954 4893019 ...
 $ sDim         : int 2
 $ spatialMethod: chr "Full"
 $ x            : NULL
 $ xDim         : num 0
 $ N            : int 87
 $ distMat      : NULL
 $ nfMax        : num Inf
 $ nfMin        : num 2
 $ nu           : num 3
 $ a1           : num 50
 $ b1           : num 1
 $ a2           : num 50
 $ b2           : num 1
 $ alphapw      : num [1:101, 1:2] 0 230 459 689 918 ...
 $ call         : language HmscRandomLevel(sData = xy)
 - attr(*, "class")= chr "HmscRandomLevel"
> 
> sum(apply(Y.train, 2, max) > 1) # Y is presence absence only data
[1] 0
> 
> m1 <- Hmsc(
+   Y = Y.train, 
+   XData = X.train, XFormula = XFormula,
+   phyloTree = P,
+   distr = "probit"
+   )
> 
> m2 <- Hmsc(
+   Y = Y.train, 
+   XData = X.train, XFormula = XFormula,
+   phyloTree = P,
+   distr = "probit",
+   studyDesign = studyDesign,
+   ranLevels = {
+     list("site" = rL.site)
+   }
+ )
> 
> m3 <- Hmsc(
+   Y = Y.train, 
+   XData = X.train, XFormula = XFormula,
+   XRRRData = X.train, XRRRFormula = XRRRFormula, ncRRR = 1, # try 1 to start with
+   phyloTree = P,
+   distr = "probit"
+   )
> 
> m4 <- Hmsc(
+   Y = Y.train, 
+   XData = X.train, XFormula = XFormula,
+   XRRRData = X.train, XRRRFormula = XRRRFormula, ncRRR = 1, # try 1 to start with
+   phyloTree = P,
+   distr = "probit",
+   studyDesign = studyDesign,
+   ranLevels = {
+     list("site" = rL.site)
+   }
+ )
> 
> 
> m1; m2; m3; m4
Hmsc object with 87 sampling units, 119 species, 4 covariates, 1 traits and 0 random levels
Hmsc object with 87 sampling units, 119 species, 4 covariates, 1 traits and 1 random levels
Hmsc object with 87 sampling units, 119 species, 5 covariates, 1 traits and 0 random levels
Hmsc object with 87 sampling units, 119 species, 5 covariates, 1 traits and 1 random levels
> 
> models <- list(m1, m2, m3, m4)
> names(models) <- c("pa_simp", "pa_simp_sp", "pa_RRR_simp", "pa_RRR_simp_sp")
> modelnames <- c("pa_simp", "pa_simp_sp", "pa_RRR_simp", "pa_RRR_simp_sp")
> 
> models
$pa_simp
Hmsc object with 87 sampling units, 119 species, 4 covariates, 1 traits and 0 random levels

$pa_simp_sp
Hmsc object with 87 sampling units, 119 species, 4 covariates, 1 traits and 1 random levels

$pa_RRR_simp
Hmsc object with 87 sampling units, 119 species, 5 covariates, 1 traits and 0 random levels

$pa_RRR_simp_sp
Hmsc object with 87 sampling units, 119 species, 5 covariates, 1 traits and 1 random levels

> 
> save(models, modelnames, file = file.path("models", "unfitted_models.rdata"))
> 
> 
> proc.time()
   user  system elapsed 
  3.597   0.487  10.053 
