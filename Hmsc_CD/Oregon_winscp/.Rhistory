filter(metric == "AUC") %>%
mutate(pred = factor(predictor, levels = predictor[order(value[type == "uni"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=type))+
geom_bar(stat="identity", position = "dodge")
all.res %>%
filter(metric == "AUC") %>%
mutate(pred = factor(predictor, levels = predictor[order(value[type == "all_but"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=type))+
geom_bar(stat="identity", position = "dodge")
all.res %>%
filter(metric == "AUC") %>%
mutate(pred = factor(predictor, levels = predictor[order(value[type == "uni"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=type))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all.res %>%
filter(metric == "AUC") %>%
mutate(pred = factor(predictor, levels = predictor[order(-value[type == "uni"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=type))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all.res %>%
filter(metric == "AUC") %>%
mutate(pred = factor(predictor, levels = predictor[order(value[type == "all_but"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=type))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
thin <- 1
samples <- 10
nChains <- 2
(samples * thin) + ceiling(0.5*thin*samples)
setwd("J:/UEA/Oregon/Oregon_winscp")
dir()
thin <- 10
samples <- 250
load(paste0("results/predSelection/prRes_univariate_thin", thin, "_samp", samples, ".rdata"))
thin <- 5
samples <- 50
# All But one
load(paste0("results/predSelection/prRes_allB_thin", thin, "_samp", samples, ".rdata"))
rm(thin, samples)
uni <- unlist(prRes, recursive = F)
names(uni)
MF.uni <- uni[grepl("MF", names(uni))]
beta.uni <- uni[grepl("beta", names(uni))]
allB <- unlist(prRes_allB, recursive = F)
MF.allB <- allB[grepl("MF", names(allB))]
beta.allB <- allB[grepl("beta", names(allB))]
sapply(beta.uni, function(x) sprintf("%.3f \U00B1 %.3f",mean(x), sd(x)))
sapply(beta.allB, function(x) sprintf("%.3f \U00B1 %.3f",mean(x), sd(x)))
sapply(beta.uni, function(x) sprintf("%.3f \U00B1 %.3f",mean(x), sd(x)))
mfRes.uni <- sapply(MF.uni, function(x) sapply(x, mean))
mfRes.uni
sort(mfRes[2,], decreasing = TRUE)
op <- par(mar = c(9,5,4,1))
nm <- sub("MF_(.*)_uni", "\\1", colnames(mfRes.uni[,order(mfRes.uni["AUC",], decreasing = TRUE)]))
barplot(mfRes.uni[,order(mfRes.uni["AUC",], decreasing = TRUE)],
beside = T, las = 2, names.arg = nm, legend = T, args.legend = list(x = "top", horiz = T, inset = -0.2))
par(op)
df.uni <- data.frame(mfRes.uni)
df.uni
df.uni$metric <- rownames(df.uni)
rownames(df.uni) <- NULL
df.uni
df.allB <- data.frame(mfRes.allB)
df.allB$metric <- rownames(df.allB)
rownames(df.allB) <- NULL
df.allB
df.allB <- data.frame(mfRes.allB)
mfRes.allB <- sapply(MF.allB, function(x) sapply(x, mean))
mfRes.allB
tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF.{0,2})_(.*)_(.*$)",
names_to = c("eval", "predictor", "type")
)
all.res <- rbind(tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF.{0,2})_(.*)_(.*$)",
names_to = c("eval", "predictor", "type")),
tidyr::pivot_longer(df.allB, cols = !metric,
names_pattern = "(MF.{0,2})_(.*)_(all_but$)",
names_to = c("eval", "predictor", "type")))
df.allB <- data.frame(mfRes.allB)
df.allB$metric <- rownames(df.allB)
rownames(df.allB) <- NULL
df.allB
all.res <- rbind(tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF.{0,2})_(.*)_(.*$)",
names_to = c("eval", "predictor", "type")),
tidyr::pivot_longer(df.allB, cols = !metric,
names_pattern = "(MF.{0,2})_(.*)_(all_but$)",
names_to = c("eval", "predictor", "type")))
rm(df.uni, df.allB)
head(all.res)
tail(all.res)
library(ggplot2)
library(dplyr)
all.res %>%
filter(metric == "AUC") %>%
mutate(pred = factor(predictor, levels = predictor[order(-value[type == "uni" & eval == "MFCV"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=type))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all.res %>%
filter(metric == "AUC" & eval == "MFCV") %>%
mutate(pred = factor(predictor, levels = predictor[order(-value[type == "uni"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=type))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all.res %>%
filter(metric == "AUC") %>%
mutate(pred = factor(predictor, levels = predictor[order(-value[type == "uni" & eval == "MFCV"])]))
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(pred = factor(predictor, levels = predictor[order(-value[type == "uni" & eval == "MFCV"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
subset(all.res, metric == "AUC" & type == "uni", select = c("predictor", "value"))
subset(all.res, metric == "AUC" & type == "uni" & eval = "MFCV", select = c("predictor", "value"))
subset(all.res, metric == "AUC" & type == "uni" & eval == "MFCV", select = c("predictor", "value"))
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value)
pred.uni.CV
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value) %>%
select(predictor)
pred.uni.CV
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value)
all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value)
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value) %>%
select(predictor) %>%
as.vector()
pred.uni.CV
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value) %>%
select(predictor) %>%
as.data.frame()%>%
as.vector()
pred.uni.CV
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value) %>%
select(predictor) %>%
as.data.frame()%>%[,1]
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value) %>%
pred.uni.CV
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value) %>%
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value)
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(value)
pred.uni.CV
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(desc(value))
pred.uni.CV
pred.uni.CV$predictor
p <- all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(pred = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p
df.uni
df.uni <- data.frame(mfRes.uni)
df.uni$metric <- rownames(df.uni)
rownames(df.uni) <- NULL
df.uni
tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF[CV]?)_(.*)_(.*$)",
names_to = c("eval", "predictor", "type")
)
tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF[[CV]]?)_(.*)_(.*$)",
names_to = c("eval", "predictor", "type"))
tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF|MFCV)_(.*)_(.*$)",
names_to = c("eval", "predictor", "type"))
all.res <- rbind(tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF|MFCV)_(.*)_(.*$)",
names_to = c("eval", "predictor", "type")),
tidyr::pivot_longer(df.allB, cols = !metric,
names_pattern = "(MF|MFCV)_(.*)_(all_but$)",
names_to = c("eval", "predictor", "type")))
df.allB <- data.frame(mfRes.allB)
df.allB$metric <- rownames(df.allB)
rownames(df.allB) <- NULL
df.allB
all.res <- rbind(tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF|MFCV)_(.*)_(.*$)",
names_to = c("eval", "predictor", "type")),
tidyr::pivot_longer(df.allB, cols = !metric,
names_pattern = "(MF|MFCV)_(.*)_(all_but$)",
names_to = c("eval", "predictor", "type")))
pred.uni.CV <- all.res %>%
filter(metric == "AUC" & type == "uni" & eval == "MFCV") %>%
arrange(desc(value))
pred.uni.CV$predictor
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(pred = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(pred = factor(predictor, levels = predictor[order(value[eval == "MFCV"])])) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(predictor = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = predictor, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_discrete(name = "Evaluation type", labels = c("Training", "Test"))
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(predictor = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = predictor, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_discrete(name = "Evaluation type", labels = c("Explanatory", "Predictive (CV)"))
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(predictor = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = predictor, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_discrete(name = "Evaluation type", labels = c("Explanatory", "Predictive (CV)"))+
ylab("AUC")
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(pred = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_discrete(name = "Evaluation type", labels = c("Explanatory", "Predictive (CV)"))+
ylab("AUC")+
xlab("Predictor")
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(pred = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_discrete(name = "Evaluation type", labels = c("Explanatory", "Predictive (CV)"))+
ylab("AUC")+
xlab("Predictor")+
title("Univariate (ordered by predictive power")
all.res %>%
filter(metric == "AUC" & type == "uni") %>%
mutate(pred = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_discrete(name = "Univariate", labels = c("Explanatory", "Predictive (CV)"))+
ylab("AUC")+
xlab("Predictor")+
setwd("J:/UEA/Oregon/Oregon_winscp")
ggsave("results/predSelection/univariate_AUC.png")
library(vegan)
getwd()
setwd("J:/UEA/Oregon/Oregon_winscp")
library(vegan)
load(file = file.path("data", "allData.Rdata")) # S,X,Y,P & Tax (where P is based on Tax)
raretaxa <- which(colSums(Y.train > 0) < 10)
length(raretaxa)
Y.train <- Y.train[, -raretaxa]
Y.train[1:5, 1:5]
try = 20
trymax = 20
parallel = 2
nmds <- vegan::metaMDS(Y.train, distance = "bray", k = 2,
try = try, trymax = trymax, parallel = parallel, binary = TRUE)
nmds
try = 20
trymax = 50
parallel = 2
nmds <- vegan::metaMDS(Y.train, distance = "bray", k = 2,
try = try, trymax = trymax, parallel = parallel, binary = TRUE)
try = 50
trymax = 10
parallel = 2
parallel = 3
no.shared(Y.train)
sum(no.shared(Y.train))
nmds <- vegan::metaMDS(Y.train, distance = "bray", k = 2,
try = try, trymax = trymax, parallel = parallel, binary = TRUE)
trymax = 100
nmds <- vegan::metaMDS(Y.train, distance = "bray", k = 2,
try = try, trymax = trymax, parallel = parallel, binary = TRUE)
try = 100
trymax = 100
parallel = 3
sum(no.shared(Y.train))
nmds <- vegan::metaMDS(Y.train, distance = "bray", k = 2,
try = try, trymax = trymax, parallel = parallel, binary = TRUE)
try = 100
trymax = 1000
parallel = 3
nmds <- vegan::metaMDS(Y.train, distance = "bray", k = 2,
try = try, trymax = trymax, parallel = parallel, binary = TRUE)
trymax = 5000
try = 100
trymax = 5000
parallel = 3
sum(no.shared(Y.train))
nmds <- vegan::metaMDS(Y.train, distance = "bray", k = 2,
try = try, trymax = trymax, parallel = parallel, binary = TRUE)
nmds
plot(nmds)
envFit <- envfit(nmds, X.train)
envFit
str(X.train)
plot(envFit)
plot(nmds)
plot(envFit, p.max = 0.05, col = "red")
plot(nmds)
plot(envFit, p.max = 0.05)
rda <- vegan::rda(X = Y.train, Y = X.train)
plot(rda)
ord <- ordisurf(nmds, X.train$elevation_m)
ordisurf(nmds, X.train$elevation_m)
ordisurf(nmds, X.train$distToStream_m)
pdf("results/predSelection/ordisurf.pdf")
par(mfrow = c(7,3))
for(x in colnames(X.train)) ordisurf(nmds, X.train[,x])
dev.off()
is.factor(X.train)
sapply(X.train, is.factor)
colnames(X.train)[sapply(X.train, is.factor)]
pdf("results/predSelection/ordisurf.pdf")
par(mfrow = c(7,3))
for(x in colnames(X.train)[!sapply(X.train, is.factor)]) ordisurf(nmds, X.train[,x])
dev.off()
pdf("results/predSelection/ordisurf%02d.pdf")
par(mfrow = c(3,2))
for(x in colnames(X.train)[!sapply(X.train, is.factor)]) ordisurf(nmds, X.train[,x])
dev.off()
ordisurf(nmds, X.train$distToStream_m, main = "Dist to stream")
pdf("results/predSelection/ordisurf%02d.pdf")
par(mfrow = c(3,2))
for(x in colnames(X.train)[!sapply(X.train, is.factor)]) ordisurf(nmds, X.train[,x], main = x)
dev.off()
save(nmds, file = "results/predSelection/nmds.rdata")
rda <- vegan::rda(X = Y.train, Y = X.train)
plot(rda)
envFit
thin <- 5
samples <- 50
load(paste0("results/predSelection/prRes_allB_thin", thin, "_samp", samples, ".rdata"))
rm(thin, samples)
allB <- unlist(prRes_allB, recursive = F)
MF.allB <- allB[grepl("MF", names(allB))]
beta.allB <- allB[grepl("beta", names(allB))]
mfRes.allB <- sapply(MF.allB, function(x) sapply(x, mean))
thin <- 10
samples <- 250
# Univariate
load(paste0("results/predSelection/prRes_univariate_thin", thin, "_samp", samples, ".rdata"))
# user  system elapsed
rm(thin, samples)
uni <- unlist(prRes, recursive = F)
# str(uni, max.level = 1)
names(uni)
MF.uni <- uni[grepl("MF", names(uni))]
beta.uni <- uni[grepl("beta", names(uni))]
mfRes.uni <- sapply(MF.uni, function(x) sapply(x, mean))
mfRes.allB <- sapply(MF.allB, function(x) sapply(x, mean))
df.uni <- data.frame(mfRes.uni)
df.uni$metric <- rownames(df.uni)
rownames(df.uni) <- NULL
df.uni
df.allB <- data.frame(mfRes.allB)
df.allB$metric <- rownames(df.allB)
rownames(df.allB) <- NULL
df.allB
all.res <- rbind(tidyr::pivot_longer(df.uni, cols = !metric,
names_pattern = "(MF|MFCV)_(.*)_(.*$)",
names_to = c("eval", "predictor", "type")),
tidyr::pivot_longer(df.allB, cols = !metric,
names_pattern = "(MF|MFCV)_(.*)_(all_but$)",
names_to = c("eval", "predictor", "type")))
rm(df.uni, df.allB)
tail(all.res)
pred.allB.CV <- all.res %>%
filter(metric == "AUC" & type == "allB" & eval == "MF") %>%
arrange(desc(value))
all.res %>%
filter(metric == "AUC" & type == "allB") %>%
mutate(pred = factor(predictor, levels = pred.uni.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("AUC")+
xlab("Predictor")
all.res %>%
filter(metric == "AUC" & type == "allB") %>%
mutate(pred = factor(predictor, levels = pred.allB.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ylab("AUC")+
xlab("Predictor")
all.res %>%
filter(metric == "AUC" & type == "allB") %>%
mutate(pred = factor(predictor, levels = pred.allB.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")
pred.allB.CV <- all.res %>%
filter(metric == "AUC" & type == "allB" & eval == "MF") %>%
arrange(desc(value))
pred.allB.CV
pred.allB.CV <- all.res %>%
filter(metric == "AUC" & type == "all_but" & eval == "MF") %>%
arrange(desc(value))
all.res %>%
filter(metric == "AUC" & type == "all_but") %>%
mutate(pred = factor(predictor, levels = pred.allB.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
pred.allB.CV <- all.res %>%
filter(metric == "AUC" & type == "all_but" & eval == "MF") %>%
arrange(value)
all.res %>%
filter(metric == "AUC" & type == "all_but") %>%
mutate(pred = factor(predictor, levels = pred.allB.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ylab("AUC")+
xlab("Predictor")
all.res %>%
filter(metric == "AUC" & type == "all_but") %>%
mutate(pred = factor(predictor, levels = pred.allB.CV$predictor)) %>%
#arrange(type, desc(value)) %>%
ggplot(aes(x = pred, y = value, fill=eval))+
geom_bar(stat="identity", position = "dodge")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ylab("AUC")+
xlab("Predictor")
ggsave("results/predSelection/jacknife_AUC.png")
#
files <- c("otuenv_M1S1_minimap2_20200929_kelpie20200927.csv",
"otuenv_M2S1_minimap2_20200929_kelpie20200927.csv",
"otuenv_M1S2_minimap2_20200929_kelpie20200927.csv",
"otuenv_M2S2_minimap2_20200929_kelpie20200927.csv")
SXY.train <- read.csv(file.path("data", files[1]))
S.train <- SXY.train[, 1:6]
head(S.train)
S.sf <- sf::st_as_sf(S.train, coords = c("UTM_E", "UTM_N"), crs = 32610)
mv <- mapview(S.sf, zcol = c("session"),
col.regions = c("blue", "green"),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT", "Thunderforest.Outdoors"))
mv <- mapview::mapview(S.sf, zcol = c("session"),
col.regions = c("blue", "green"),
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT", "Thunderforest.Outdoors"))
S.sf
mv <- mapview::mapview(S.sf, map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT", "Thunderforest.Outdoors"))
mv
mv <- mapview::mapview(S.sf,
map.types = c("Esri.WorldImagery", "OpenStreetMap.HOT", "Thunderforest.Outdoors"),
legend = F)
mv
S.train.dist <- st_distance(S.sf)
S.train.dist <- sf::st_distance(S.sf)
S.train.dist
diag(S.train.dist) <- NA
min(S.train.dist, na.rm = T)
plot(sort(S.train.dist[upper.tri(S.train.dist)]))
hist(S.train.dist[upper.tri(S.train.dist)])
